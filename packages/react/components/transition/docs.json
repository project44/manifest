{
  "Collapse": [
    {
      "name": "children",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": true,
      "description": "A single child element."
    },
    {
      "name": "duration",
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The animation duration in miliseconds."
    },
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ],
  "Fade": [
    {
      "name": "children",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": true,
      "description": "A single child element."
    },
    {
      "name": "duration",
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The animation duration in miliseconds."
    },
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ],
  "Transition": [
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "children",
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | ((status: TransitionStatus, props: Record<...>) => ReactNode)",
      "required": false,
      "description": "An element or render function."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ]
}
