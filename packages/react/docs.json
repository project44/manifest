{
  "ActionCard": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "href",
      "type": "string",
      "required": true,
      "description": "The href link to navigate to when the card is clicked"
    }
  ],
  "ActionCardBody": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "ActionCardHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "ActionCardImage": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\"",
      "defaultValue": "'large'",
      "required": false,
      "description": "The size of the card image"
    },
    {
      "name": "src",
      "type": "string",
      "required": true,
      "description": "The source for the image"
    }
  ],
  "Calendar": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "CalendarRange": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "showCalendar",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Allows to show or hide the calendar of the component"
    },
    {
      "name": "showRanges",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Allows to pass or avoid the ranges to the component"
    },
    {
      "name": "ranges",
      "type": "DefinedRange[]",
      "required": false,
      "description": "Brings the list of ranges defined to the component"
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Checkbox": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the element."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Combobox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the combobox."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "ComboboxItem": [
    { "name": "as", "type": "\"div\"", "required": false, "description": "" },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the item text."
    }
  ],
  "ComboboxSection": [
    { "name": "as", "type": "\"div\"", "required": false, "description": "" },
    {
      "name": "children",
      "type": "ReactNode & (ItemElement<object> | ItemElement<object>[] | ItemRenderer<object>)",
      "required": true,
      "description": "Static child items or a function to render children."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "DatePicker": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "DateRangePicker": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "showCalendar",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Allows to show or hide the calendar of the component"
    },
    {
      "name": "showRanges",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Allows to pass or avoid the ranges to the component and shoen them instead of the predefined ones"
    },
    {
      "name": "ranges",
      "type": "DefinedRange[]",
      "required": false,
      "description": "Brings the list of ranges defined to the component"
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "FormControl": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text appended to the input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text element."
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the form control input element."
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label element."
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "required": false,
      "description": "The layout orientation of the form control."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Icon": [],
  "ListBox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "ListBoxItem": [],
  "ListBoxSection": [],
  "MultiCombobox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the combobox."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "shouldFocusWrap",
      "type": "boolean",
      "required": false,
      "description": "Whether keyboard navigation is circular."
    },
    {
      "name": "allowsCustomValue",
      "type": "boolean",
      "required": false,
      "description": "Whether the ComboBox allows a non-item matching input value to be set."
    },
    {
      "name": "defaultItems",
      "type": "Iterable<object>",
      "required": false,
      "description": "The list of ComboBox items (uncontrolled)."
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the default open state of the menu."
    },
    {
      "name": "defaultInputValue",
      "type": "string",
      "required": false,
      "description": "The default value of the ComboBox input (uncontrolled)."
    },
    {
      "name": "inputValue",
      "type": "string",
      "required": false,
      "description": "The value of the ComboBox input (controlled)."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the open state of the menu."
    },
    {
      "name": "items",
      "type": "Iterable<object>",
      "required": false,
      "description": "The list of ComboBox items (controlled)."
    },
    {
      "name": "menuTrigger",
      "type": "MenuTriggerAction",
      "defaultValue": "'input'",
      "required": false,
      "description": "The interaction required to display the ComboBox menu."
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)."
    },
    {
      "name": "onInputChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the ComboBox input value changes."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean, menuTrigger?: MenuTriggerAction | undefined) => void",
      "required": false,
      "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "MultiSelect": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "autoComplete",
      "type": "string",
      "required": false,
      "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete)."
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "The name of the input, used when submitting an HTML form."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the open state of the menu."
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the default open state of the menu."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Method that is called when the open state of the menu changes."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Pill": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "colorScheme",
      "type": "\"indigo\" | \"red\"",
      "defaultValue": "'indigo'",
      "required": false,
      "description": "The color scheme of the pill"
    },
    {
      "name": "icon",
      "type": "ReactNode",
      "required": false,
      "description": "The icon to render in the pill."
    },
    {
      "name": "isCollapsible",
      "type": "boolean",
      "defaultValue": "'false'",
      "required": false,
      "description": "Whether the pill is collapsible."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "The text label of the pill."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Radio": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the Radio. Accepts any renderable node."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "RadioGroup": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "required": false,
      "description": "The layout orientation of the radio group."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Select": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "SelectItem": [
    { "name": "as", "type": "\"div\"", "required": false, "description": "" },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the item text."
    }
  ],
  "SelectSection": [
    { "name": "as", "type": "\"div\"", "required": false, "description": "" },
    {
      "name": "children",
      "type": "ReactNode & (ItemElement<object> | ItemElement<object>[] | ItemRenderer<object>)",
      "required": true,
      "description": "Static child items or a function to render children."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Separator": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'horizontal",
      "required": false,
      "description": "The orientation of the separator."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Switch": [],
  "Tag": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "isRemovable",
      "type": "boolean",
      "required": false,
      "description": "Whether the tag is removeable."
    },
    {
      "name": "onRemove",
      "type": "() => void",
      "required": false,
      "description": "Handler called on tag removable."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "TextArea": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "defaultValue",
      "type": "string",
      "required": false,
      "description": "The default value (uncontrolled)."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "value",
      "type": "string",
      "required": false,
      "description": "The current value (controlled)."
    },
    {
      "name": "onChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the value changes."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the input is disabled."
    },
    {
      "name": "isReadOnly",
      "type": "boolean",
      "required": false,
      "description": "Whether the input can be selected but not changed by the user."
    },
    {
      "name": "validationState",
      "type": "ValidationState",
      "required": false,
      "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "inputRef",
      "type": "RefObject<HTMLInputElement | HTMLTextAreaElement>",
      "required": false,
      "description": "The ref passed to the input element."
    },
    {
      "name": "inputProps",
      "type": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>",
      "required": false,
      "description": "Props passed to the input element."
    },
    {
      "name": "multiline",
      "type": "boolean",
      "required": false,
      "description": "Whether the textfield should support multiline input (textarea)."
    }
  ],
  "TextField": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "defaultValue",
      "type": "string",
      "required": false,
      "description": "The default value (uncontrolled)."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "value",
      "type": "string",
      "required": false,
      "description": "The current value (controlled)."
    },
    {
      "name": "onChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the value changes."
    },
    {
      "name": "endIcon",
      "type": "ReactNode",
      "required": false,
      "description": "Icon displayed at the end of the text field."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "inputRef",
      "type": "RefObject<HTMLInputElement | HTMLTextAreaElement>",
      "required": false,
      "description": "The ref passed to the input element."
    },
    {
      "name": "inputProps",
      "type": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>",
      "required": false,
      "description": "Props passed to the input element."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the input is disabled."
    },
    {
      "name": "isReadOnly",
      "type": "boolean",
      "required": false,
      "description": "Whether the input can be selected but not changed by the user."
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "multiline",
      "type": "boolean",
      "required": false,
      "description": "Whether the textfield should support multiline input (textarea)."
    },
    {
      "name": "startIcon",
      "type": "ReactNode",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "validationState",
      "type": "ValidationState",
      "required": false,
      "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Typography": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "variant",
      "type": "\"display\" | \"body\" | \"caption\" | \"title\" | \"heading\" | \"bodyBold\" | \"captionBold\" | \"subtext\" | \"subtextBold\" | \"subtitle\"",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The display variant of the text."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "VisuallyHidden": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "isFocusable",
      "type": "boolean",
      "required": false,
      "description": "Whether the element should become visible on focus, for example skip links."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ]
}
