{
  "ActionCard": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "href",
      "type": "string",
      "required": true,
      "description": "The href link to navigate to when the card is clicked"
    }
  ],
  "ActionCardBody": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "ActionCardHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "ActionCardImage": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "size",
      "type": "\"small\" | \"large\"",
      "defaultValue": "'large'",
      "required": false,
      "description": "The size of the card image"
    },
    {
      "name": "src",
      "type": "string",
      "required": true,
      "description": "The source for the image"
    }
  ],
  "Avatar": [
    {
      "name": "alt",
      "type": "string",
      "required": false,
      "description": "The alt text passed to the image."
    },
    {
      "name": "fallback",
      "type": "ReactNode",
      "required": false,
      "description": "Name used as a fallback if src is not provided or image cannot be found."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the avatar."
    },
    {
      "name": "src",
      "type": "string",
      "required": false,
      "description": "The `src` attribute for the `img` element."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "Box": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "Breadcrumb": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "BreadcrumbItem": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "href",
      "type": "string",
      "required": true,
      "description": "Breadcrumb item link href"
    }
  ],
  "Button": [
    {
      "name": "autoFocus",
      "type": "boolean",
      "required": false,
      "description": "Whether the element should receive focus on render."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "endIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added after the button text."
    },
    {
      "name": "href",
      "type": "string",
      "required": false,
      "description": "A URL to link to if as=\"a\"."
    },
    {
      "name": "excludeFromTabOrder",
      "type": "boolean",
      "required": false,
      "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the button is disabled."
    },
    {
      "name": "rel",
      "type": "string",
      "required": false,
      "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)."
    },
    {
      "name": "size",
      "type": "ButtonSize",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the button."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    },
    {
      "name": "target",
      "type": "string",
      "required": false,
      "description": "The target window for the link."
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "defaultValue": "'button'",
      "required": false,
      "description": "The behavior of the button when used in an HTML form."
    },
    {
      "name": "variant",
      "type": "ButtonVariant",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The display variant of the button."
    }
  ],
  "ButtonGroup": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Whether the buttons in the button group are all disabled."
    },
    {
      "name": "isAttached",
      "type": "boolean",
      "required": false,
      "description": "Whether the buttons in the button are attached."
    },
    {
      "name": "size",
      "type": "ButtonSize",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the buttons in the group."
    },
    {
      "name": "variant",
      "type": "ButtonVariant",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The group variant"
    }
  ],
  "Calendar": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "CalendarRange": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "showCalendar",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Allows to show or hide the calendar of the component"
    },
    {
      "name": "showRanges",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Allows to pass or avoid the ranges to the component"
    },
    {
      "name": "ranges",
      "type": "DefinedRange[]",
      "required": false,
      "description": "Brings the list of ranges defined to the component"
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Card": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "CardBody": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "CardFooter": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "CardHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "Checkbox": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the element."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Collapse": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "Content of the transitioned element."
    },
    {
      "name": "duration",
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The animation duration in miliseconds."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ],
  "Combobox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the combobox."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "ComboboxItem": [
    {
      "name": "as",
      "type": "\"div\"",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the item text."
    }
  ],
  "ComboboxSection": [
    {
      "name": "as",
      "type": "\"div\"",
      "required": false,
      "description": ""
    },
    {
      "name": "children",
      "type": "ReactNode & (ItemElement<object> | ItemElement<object>[] | ItemRenderer<object>)",
      "required": true,
      "description": "Static child items or a function to render children."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Container": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "fixed",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the container should adjust its max-width based on the current screen size."
    },
    {
      "name": "maxWidth",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "defaultValue": "'large'",
      "required": false,
      "description": "The max-width of the container."
    }
  ],
  "DatePicker": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "DateRangePicker": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "showCalendar",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Allows to show or hide the calendar of the component"
    },
    {
      "name": "showRanges",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Allows to pass or avoid the ranges to the component and shoen them instead of the predefined ones"
    },
    {
      "name": "ranges",
      "type": "DefinedRange[]",
      "required": false,
      "description": "Brings the list of ranges defined to the component"
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Dialog": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "isDismissable",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether to close the dialog when the user interacts outside it."
    },
    {
      "name": "isKeyboardDismissDisabled",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Whether pressing the escape key to close the dialog should be disabled."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the dialog is currently open."
    },
    {
      "name": "onClose",
      "type": "() => void",
      "required": false,
      "description": "Handler that is called when the dialog should close."
    },
    {
      "name": "role",
      "type": "\"dialog\" | \"alertdialog\"",
      "defaultValue": "'dialog'",
      "required": false,
      "description": "The accessibility role for the dialog."
    }
  ],
  "DialogContent": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "DialogFooter": [
    {
      "name": "buttonGroupProps",
      "type": "ButtonGroupProps",
      "required": false,
      "description": "Props passed to the button group component."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "DialogHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "buttonProps",
      "type": "Omit<Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \"key\" | keyof ButtonHTMLAttributes<...>> & { ...; }, \"size\" | ... 19 more ... | \"onPressUp\"> & IconButtonProps & { ...; }",
      "required": false,
      "description": "Props bassed to the button component."
    },
    {
      "name": "typographyProps",
      "type": "Omit<Pick<DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, \"key\" | keyof HTMLAttributes<...>> & { ...; }, \"children\" | keyof TypographyOptions<...>> & { ...; } & TypographyOptions<...>",
      "required": false,
      "description": "Props bassed to the typography component."
    }
  ],
  "Dropdown": [
    {
      "name": "children",
      "type": "ReactNode[]",
      "required": true,
      "description": "The contents of the MenuTrigger - a trigger and a Menu."
    },
    {
      "name": "closeOnSelect",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the dropdown closes when a selection is made."
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the overlay is open by default (uncontrolled)."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Whether menu trigger is disabled."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the overlay is open by default (controlled)."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the overlay's open state changes."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "trigger",
      "type": "MenuTriggerType",
      "defaultValue": "'press'",
      "required": false,
      "description": "How the menu is triggered."
    },
    {
      "name": "type",
      "type": "\"menu\" | \"listbox\"",
      "defaultValue": "'menu'",
      "required": false,
      "description": "The type of menu that the menu trigger opens."
    }
  ],
  "DropdownItem": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    },
    {
      "name": "endIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added after the button text."
    },
    {
      "name": "onAction",
      "type": "(key: Key) => void",
      "required": false,
      "description": "Callback executed on item select."
    }
  ],
  "DropdownMenu": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "DropdownSection": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "onAction",
      "type": "(key: Key) => void",
      "required": false,
      "description": "Callback executed on item select."
    }
  ],
  "Fade": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "Content of the transitioned element."
    },
    {
      "name": "duration",
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "The animation duration in miliseconds."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ],
  "Flex": [
    {
      "name": "align",
      "type": "\"center\" | \"end\" | \"baseline\" | \"start\"",
      "required": false,
      "description": "The alignment of the container's children."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "gap",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "required": false,
      "description": "The gap between rows and columns."
    },
    {
      "name": "justify",
      "type": "\"center\" | \"end\" | \"start\" | \"around\" | \"between\"",
      "required": false,
      "description": "The justification of the container's children."
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "required": false,
      "description": "The orientation of the container's children."
    },
    {
      "name": "wrap",
      "type": "boolean",
      "required": false,
      "description": "Whether the container's should wrap when overflown."
    }
  ],
  "FormControl": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text appended to the input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text element."
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the form control input element."
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label element."
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "required": false,
      "description": "The layout orientation of the form control."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Grid": [
    {
      "name": "columnGap",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "required": false,
      "description": "The gap between columns"
    },
    {
      "name": "columns",
      "type": "GridTemplateColumns<0 | (string & {})>",
      "defaultValue": "'auto'",
      "required": false,
      "description": "Shorthand for the gridTemplateColumns css property."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "flow",
      "type": "GridAutoFlow",
      "required": false,
      "description": "Shorthand for the gridAutoFlow css property."
    },
    {
      "name": "gap",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "required": false,
      "description": "The gap between rows and columns."
    },
    {
      "name": "rowGap",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "required": false,
      "description": "The gap between rows"
    },
    {
      "name": "rows",
      "type": "GridTemplateRows<0 | (string & {})>",
      "defaultValue": "'auto'",
      "required": false,
      "description": "Shorthand for the gridTemplateRows css property."
    }
  ],
  "GridItem": [
    {
      "name": "area",
      "type": "GridArea",
      "required": false,
      "description": "Shorthand for the gridArea css property."
    },
    {
      "name": "column",
      "type": "GridColumn",
      "required": false,
      "description": "Shorthand for the gridColumn css property."
    },
    {
      "name": "columnEnd",
      "type": "GridColumnEnd",
      "required": false,
      "description": "Shorthand for the gridColumnEnd css property."
    },
    {
      "name": "columnStart",
      "type": "GridColumnStart",
      "required": false,
      "description": "Shorthand for the gridColumnStart css property."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "order",
      "type": "Order",
      "required": false,
      "description": "Shorthand for the order css property."
    },
    {
      "name": "row",
      "type": "GridRow",
      "required": false,
      "description": "Shorthand for the gridRow css property."
    },
    {
      "name": "rowEnd",
      "type": "GridRowEnd",
      "required": false,
      "description": "Shorthand for the gridRowEnd css property."
    },
    {
      "name": "rowStart",
      "type": "GridRowStart",
      "required": false,
      "description": "Shorthand for the gridRowStart css property."
    }
  ],
  "Icon": [],
  "IconButton": [
    {
      "name": "size",
      "type": "ButtonSize",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the button."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the button is disabled."
    },
    {
      "name": "autoFocus",
      "type": "boolean",
      "required": false,
      "description": "Whether the element should receive focus on render."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "target",
      "type": "string",
      "required": false,
      "description": "The target window for the link."
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "defaultValue": "'button'",
      "required": false,
      "description": "The behavior of the button when used in an HTML form."
    },
    {
      "name": "href",
      "type": "string",
      "required": false,
      "description": "A URL to link to if as=\"a\"."
    },
    {
      "name": "rel",
      "type": "string",
      "required": false,
      "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)."
    },
    {
      "name": "excludeFromTabOrder",
      "type": "boolean",
      "required": false,
      "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available."
    },
    {
      "name": "variant",
      "type": "ButtonVariant",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The display variant of the button."
    }
  ],
  "Link": [],
  "ListBox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "ListBoxItem": [],
  "ListBoxSection": [],
  "Menu": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "MenuGroup": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "defaultExpanded",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu group is open by default (uncontrolled)."
    },
    {
      "name": "iconProps",
      "type": "IconProps",
      "required": false,
      "description": "Props pass to the end icon."
    },
    {
      "name": "isExpanded",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu group is expanded by default (controlled)."
    },
    {
      "name": "itemProps",
      "type": "MenuItemProps",
      "required": false,
      "description": "Props passed to the root menu item."
    },
    {
      "name": "label",
      "type": "string",
      "required": true,
      "description": "The text for the menu group label."
    },
    {
      "name": "labelProps",
      "type": "TypographyProps<\"span\">",
      "required": false,
      "description": "Props passed to the label component."
    },
    {
      "name": "onExpandedChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the menu group's open state changes."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    }
  ],
  "MenuItem": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "endIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added after the item text."
    },
    {
      "name": "isSelected",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu item is selected."
    },
    {
      "name": "label",
      "type": "string",
      "required": true,
      "description": "The text for the menu list label."
    },
    {
      "name": "labelProps",
      "type": "TypographyProps<\"span\">",
      "required": false,
      "description": "Props passed to the label component."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    }
  ],
  "MultiCombobox": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the combobox."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "shouldFocusWrap",
      "type": "boolean",
      "required": false,
      "description": "Whether keyboard navigation is circular."
    },
    {
      "name": "allowsCustomValue",
      "type": "boolean",
      "required": false,
      "description": "Whether the ComboBox allows a non-item matching input value to be set."
    },
    {
      "name": "defaultItems",
      "type": "Iterable<object>",
      "required": false,
      "description": "The list of ComboBox items (uncontrolled)."
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the default open state of the menu."
    },
    {
      "name": "defaultInputValue",
      "type": "string",
      "required": false,
      "description": "The default value of the ComboBox input (uncontrolled)."
    },
    {
      "name": "inputValue",
      "type": "string",
      "required": false,
      "description": "The value of the ComboBox input (controlled)."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the open state of the menu."
    },
    {
      "name": "items",
      "type": "Iterable<object>",
      "required": false,
      "description": "The list of ComboBox items (controlled)."
    },
    {
      "name": "menuTrigger",
      "type": "MenuTriggerAction",
      "defaultValue": "'input'",
      "required": false,
      "description": "The interaction required to display the ComboBox menu."
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)."
    },
    {
      "name": "onInputChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the ComboBox input value changes."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean, menuTrigger?: MenuTriggerAction | undefined) => void",
      "required": false,
      "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "MultiSelect": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "autoComplete",
      "type": "string",
      "required": false,
      "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete)."
    },
    {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "The name of the input, used when submitting an HTML form."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the open state of the menu."
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Sets the default open state of the menu."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Method that is called when the open state of the menu changes."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Overlay": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The overlay to render in the portal."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the children to."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the overlay is open."
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    }
  ],
  "Pagination": [
    {
      "name": "boundaries",
      "type": "number",
      "defaultValue": "1",
      "required": false,
      "description": "The outer visible boundaries of the pagination list."
    },
    {
      "name": "defaultPage",
      "type": "number",
      "defaultValue": "1",
      "required": false,
      "description": "The default page number (uncontrolled)."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "page",
      "type": "number",
      "required": false,
      "description": "The current page (controlled)."
    },
    {
      "name": "rowsPerPage",
      "type": "number",
      "defaultValue": "10",
      "required": false,
      "description": "The number of rows rendered per page."
    },
    {
      "name": "showPageNumbers",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether to show page numbers buttons."
    },
    {
      "name": "siblings",
      "type": "number",
      "defaultValue": "1",
      "required": false,
      "description": "The number of pages to display before and after the current selected page."
    },
    {
      "name": "totalRowCount",
      "type": "number",
      "required": false,
      "description": "The total number of rows in the table."
    },
    {
      "name": "onChange",
      "type": "(page: number) => void",
      "required": false,
      "description": "Callback executed on page change."
    }
  ],
  "Pill": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "colorScheme",
      "type": "\"indigo\" | \"red\"",
      "defaultValue": "'indigo'",
      "required": false,
      "description": "The color scheme of the pill"
    },
    {
      "name": "icon",
      "type": "ReactNode",
      "required": false,
      "description": "The icon to render in the pill."
    },
    {
      "name": "isCollapsible",
      "type": "boolean",
      "defaultValue": "'false'",
      "required": false,
      "description": "Whether the pill is collapsible."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "The text label of the pill."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Popover": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "isDismissable",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether to close the overlay when the user interacts outside it."
    },
    {
      "name": "isKeyboardDismissDisabled",
      "type": "boolean",
      "defaultValue": "false",
      "required": false,
      "description": "Whether pressing the escape key to close the popover should be disabled."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the popover is currently open."
    },
    {
      "name": "onClose",
      "type": "() => void",
      "required": false,
      "description": "Handler that is called when the popover should close."
    },
    {
      "name": "shouldCloseOnBlur",
      "type": "boolean",
      "required": false,
      "description": "Whether the overlay should close when focus is lost or moves outside it."
    },
    {
      "name": "shouldCloseOnInteractOutside",
      "type": "(element: Element) => boolean",
      "required": false,
      "description": "When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref."
    }
  ],
  "PopoverTrigger": [
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the popover is open by default (uncontrolled)."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the popover is open by default (controlled)."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the popover element.\n\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the popover's open state changes."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "scrollRef",
      "type": "RefObject<Element>",
      "defaultValue": "overlayRef",
      "required": false,
      "description": "A ref for the scrollable region within the popover."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "shouldUpdatePosition",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the popover should update its position automatically."
    },
    {
      "name": "type",
      "type": "\"grid\" | \"dialog\" | \"menu\" | \"listbox\" | \"tree\"",
      "defaultValue": "'dialog'",
      "required": false,
      "description": "Type of popover that is opened by the trigger."
    }
  ],
  "PopoverTriggerState": [
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the popover is open by default (uncontrolled)."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the popover is open by default (controlled)."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the popover's open state changes."
    }
  ],
  "Portal": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The content of the portal."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the children to."
    }
  ],
  "Provider": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "disableCSSBaseline",
      "type": "boolean",
      "defaultValue": "false;",
      "required": false,
      "description": "Whether to disable the baseline css."
    },
    {
      "name": "locale",
      "type": "string",
      "defaultValue": "'en-US'",
      "required": false,
      "description": "The locale for your application as a [BCP 47](https://www.ietf.org/rfc/bcp/bcp47.txt) language code.\nDefaults to the browser/OS language setting."
    }
  ],
  "Radio": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The label for the Radio. Accepts any renderable node."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "RadioGroup": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "required": false,
      "description": "The layout orientation of the radio group."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Select": [
    {
      "name": "children",
      "type": "ReactNode & CollectionChildren<object>",
      "required": true,
      "description": "The contents of the collection."
    },
    {
      "name": "containerRef",
      "type": "RefObject<HTMLElement>",
      "required": false,
      "description": "The ref of the element to append the overlay to."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "maxHeight",
      "type": "number",
      "required": false,
      "description": "The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "placement",
      "type": "Placement",
      "defaultValue": "'bottom'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "shouldFlip",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "SelectItem": [
    {
      "name": "as",
      "type": "\"div\"",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the item text."
    }
  ],
  "SelectSection": [
    {
      "name": "as",
      "type": "\"div\"",
      "required": false,
      "description": ""
    },
    {
      "name": "children",
      "type": "ReactNode & (ItemElement<object> | ItemElement<object>[] | ItemRenderer<object>)",
      "required": true,
      "description": "Static child items or a function to render children."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Separator": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'horizontal",
      "required": false,
      "description": "The orientation of the separator."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Navigation": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the navigation is open by default (uncontrolled)."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the navigation is expanded by default (controlled)."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the navigation's open state changes."
    }
  ],
  "SideNavigationContent": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "SideNavigationFooter": [
    {
      "name": "avatarProps",
      "type": "AvatarProps",
      "required": true,
      "description": "Props passed to the avatar component"
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "title",
      "type": "string",
      "required": true,
      "description": "The title of the footer menu"
    },
    {
      "name": "subTitle",
      "type": "string",
      "required": false,
      "description": "The sub title of the footer menu"
    },
    {
      "name": "autoFocus",
      "type": "boolean",
      "required": false,
      "description": "Whether the element should receive focus on render."
    },
    {
      "name": "endIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added after the button text."
    },
    {
      "name": "href",
      "type": "string",
      "required": false,
      "description": "A URL to link to if as=\"a\"."
    },
    {
      "name": "excludeFromTabOrder",
      "type": "boolean",
      "required": false,
      "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the button is disabled."
    },
    {
      "name": "rel",
      "type": "string",
      "required": false,
      "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)."
    },
    {
      "name": "size",
      "type": "ButtonSize",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the button."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    },
    {
      "name": "target",
      "type": "string",
      "required": false,
      "description": "The target window for the link."
    },
    {
      "name": "type",
      "type": "\"button\" | \"reset\" | \"submit\"",
      "defaultValue": "'button'",
      "required": false,
      "description": "The behavior of the button when used in an HTML form."
    },
    {
      "name": "variant",
      "type": "ButtonVariant",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The display variant of the button."
    }
  ],
  "SideNavigationHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "logo",
      "type": "ReactNode",
      "required": false,
      "description": "The logo of the application."
    }
  ],
  "SideNavigationMenu": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "SideNavigationMenuGroup": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "defaultExpanded",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu group is open by default (uncontrolled)."
    },
    {
      "name": "iconProps",
      "type": "IconProps",
      "required": false,
      "description": "Props pass to the end icon."
    },
    {
      "name": "isExpanded",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu group is expanded by default (controlled)."
    },
    {
      "name": "itemProps",
      "type": "MenuItemProps",
      "required": false,
      "description": "Props passed to the root menu item."
    },
    {
      "name": "label",
      "type": "string",
      "required": true,
      "description": "The text for the menu group label."
    },
    {
      "name": "labelProps",
      "type": "TypographyProps<\"span\">",
      "required": false,
      "description": "Props passed to the label component."
    },
    {
      "name": "onExpandedChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the menu group's open state changes."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    }
  ],
  "SideNavigationMenuItem": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "endIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added after the item text."
    },
    {
      "name": "isSelected",
      "type": "boolean",
      "required": false,
      "description": "Whether the menu item is selected."
    },
    {
      "name": "label",
      "type": "string",
      "required": true,
      "description": "The text for the menu list label."
    },
    {
      "name": "labelProps",
      "type": "TypographyProps<\"span\">",
      "required": false,
      "description": "Props passed to the label component."
    },
    {
      "name": "startIcon",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon added before the button text."
    }
  ],
  "Skeleton": [
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Classes to be applied to the root element"
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "Spinner": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "size",
      "type": "SpinnerSize",
      "defaultValue": "'large'",
      "required": false,
      "description": "The size of the spinner"
    }
  ],
  "Stack": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "gap",
      "type": "\"small\" | \"large\" | \"medium\" | \"x-large\" | \"x-small\"",
      "required": false,
      "description": "The gap between elements in the stack."
    },
    {
      "name": "orientation",
      "type": "\"horizontal\" | \"vertical\"",
      "defaultValue": "'vertical'",
      "required": false,
      "description": "The layout orientation  of the stack."
    }
  ],
  "Switch": [],
  "Table": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "isDense",
      "type": "boolean",
      "required": false,
      "description": "Visually compact vertical spacing. Defaults to false"
    }
  ],
  "TableBody": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "TableCell": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "align",
      "type": "Align",
      "defaultValue": "'left'",
      "required": false,
      "description": "Text alignment of the table cell."
    }
  ],
  "TableColumn": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "align",
      "type": "Align",
      "defaultValue": "'left'",
      "required": false,
      "description": "Text alignment of the table column."
    },
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": "The content of the column."
    },
    {
      "name": "isActive",
      "type": "boolean",
      "required": false,
      "description": "Whether the current column is actively sorted."
    },
    {
      "name": "isSortable",
      "type": "boolean",
      "required": false,
      "description": "Whether the column supports sorting."
    },
    {
      "name": "sortDirection",
      "type": "\"desc\" | \"asc\"",
      "defaultValue": "'asc'",
      "required": false,
      "description": "The sort direction of the column."
    },
    {
      "name": "onClick",
      "type": "(event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void",
      "required": false,
      "description": "Callback executed on column click, used for column sort only."
    }
  ],
  "TableFooter": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "TableHeader": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "TableRow": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    }
  ],
  "Tag": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "isRemovable",
      "type": "boolean",
      "required": false,
      "description": "Whether the tag is removeable."
    },
    {
      "name": "onRemove",
      "type": "() => void",
      "required": false,
      "description": "Handler called on tag removable."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "TextArea": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "defaultValue",
      "type": "string",
      "required": false,
      "description": "The default value (uncontrolled)."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "value",
      "type": "string",
      "required": false,
      "description": "The current value (controlled)."
    },
    {
      "name": "onChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the value changes."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the input is disabled."
    },
    {
      "name": "isReadOnly",
      "type": "boolean",
      "required": false,
      "description": "Whether the input can be selected but not changed by the user."
    },
    {
      "name": "validationState",
      "type": "ValidationState",
      "required": false,
      "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "inputRef",
      "type": "RefObject<HTMLInputElement | HTMLTextAreaElement>",
      "required": false,
      "description": "The ref passed to the input element."
    },
    {
      "name": "inputProps",
      "type": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>",
      "required": false,
      "description": "Props passed to the input element."
    },
    {
      "name": "multiline",
      "type": "boolean",
      "required": false,
      "description": "Whether the textfield should support multiline input (textarea)."
    }
  ],
  "TextField": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "defaultValue",
      "type": "string",
      "required": false,
      "description": "The default value (uncontrolled)."
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Temporary text that occupies the text input when it is empty."
    },
    {
      "name": "size",
      "type": "\"small\" | \"medium\"",
      "defaultValue": "'medium'",
      "required": false,
      "description": "The size of the combobox"
    },
    {
      "name": "value",
      "type": "string",
      "required": false,
      "description": "The current value (controlled)."
    },
    {
      "name": "onChange",
      "type": "(value: string) => void",
      "required": false,
      "description": "Handler that is called when the value changes."
    },
    {
      "name": "endIcon",
      "type": "ReactNode",
      "required": false,
      "description": "Icon displayed at the end of the text field."
    },
    {
      "name": "helperText",
      "type": "ReactNode",
      "required": false,
      "description": "Helper text to append to the form control input element."
    },
    {
      "name": "helperTextProps",
      "type": "HTMLAttributes<HTMLElement>",
      "required": false,
      "description": "Props passed to the helper text."
    },
    {
      "name": "inputRef",
      "type": "RefObject<HTMLInputElement | HTMLTextAreaElement>",
      "required": false,
      "description": "The ref passed to the input element."
    },
    {
      "name": "inputProps",
      "type": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>",
      "required": false,
      "description": "Props passed to the input element."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the input is disabled."
    },
    {
      "name": "isReadOnly",
      "type": "boolean",
      "required": false,
      "description": "Whether the input can be selected but not changed by the user."
    },
    {
      "name": "isRequired",
      "type": "boolean",
      "required": false,
      "description": "Whether user input is required on the input before form submission."
    },
    {
      "name": "label",
      "type": "ReactNode",
      "required": false,
      "description": "Label of the input element"
    },
    {
      "name": "labelProps",
      "type": "LabelHTMLAttributes<HTMLLabelElement>",
      "required": false,
      "description": "Props passed to the label."
    },
    {
      "name": "multiline",
      "type": "boolean",
      "required": false,
      "description": "Whether the textfield should support multiline input (textarea)."
    },
    {
      "name": "startIcon",
      "type": "ReactNode",
      "required": false,
      "description": "Icon displayed at the start of the text field."
    },
    {
      "name": "validationState",
      "type": "ValidationState",
      "required": false,
      "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "Toaster": [
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "duration",
      "type": "number",
      "defaultValue": "5000",
      "required": false,
      "description": "The length of time (in milliseconds) the toast is rendered."
    }
  ],
  "Tooltip": [
    {
      "name": "children",
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": true,
      "description": "A single child element."
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object"
    },
    {
      "name": "defaultOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the tooltip is open by default (uncontrolled)."
    },
    {
      "name": "delay",
      "type": "number",
      "defaultValue": "250",
      "required": false,
      "description": "The delay time for the tooltip to show up."
    },
    {
      "name": "isDisabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the tooltip should be disabled, independent from the trigger."
    },
    {
      "name": "isOpen",
      "type": "boolean",
      "required": false,
      "description": "Whether the tooltip is open by default (controlled)."
    },
    {
      "name": "offset",
      "type": "number",
      "defaultValue": "4",
      "required": false,
      "description": "The additional offset applied along the main axis between the element and its\nanchor element."
    },
    {
      "name": "onOpenChange",
      "type": "(isOpen: boolean) => void",
      "required": false,
      "description": "Handler that is called when the tooltip's open state changes."
    },
    {
      "name": "placement",
      "type": "\"bottom\" | \"left\" | \"right\" | \"top\" | \"end\" | \"start\"",
      "defaultValue": "'top'",
      "required": false,
      "description": "The placement of the element with respect to its anchor element."
    },
    {
      "name": "title",
      "type": "ReactNode",
      "required": false,
      "description": "The content rendered within the tooltip."
    },
    {
      "name": "trigger",
      "type": "\"focus\"",
      "required": false,
      "description": "By default, opens for both focus and hover. Can be made to open only for focus."
    }
  ],
  "Transition": [
    {
      "name": "addEndListener",
      "type": "(node: HTMLElement, done: () => void) => void",
      "required": false,
      "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
    },
    {
      "name": "appear",
      "type": "boolean",
      "defaultValue": "true",
      "required": false,
      "description": "Normally a component is not transitioned if it is shown when the\n`<Transition>` component mounts. If you want to transition on the first\nmount set  appear to true, and the component will transition in as soon\nas the `<Transition>` mounts. Note: there are no specific \"appear\" states.\nappear only adds an additional enter transition."
    },
    {
      "name": "children",
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | ((status: TransitionStatus, props: Record<...>) => ReactNode)",
      "required": false,
      "description": "An element or render function."
    },
    {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "Class name attaced to dom element."
    },
    {
      "name": "in",
      "type": "boolean",
      "required": false,
      "description": "Show the component; triggers the enter or exit states"
    },
    {
      "name": "mountOnEnter",
      "type": "boolean",
      "required": false,
      "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
    },
    {
      "name": "onEnter",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
    },
    {
      "name": "onEntering",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onEntered",
      "type": "(node: HTMLElement, isAppearing: boolean) => void",
      "required": false,
      "description": "Handler fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
    },
    {
      "name": "onExit",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired before the \"exiting\" status is applied."
    },
    {
      "name": "onExiting",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exiting\" status is applied."
    },
    {
      "name": "onExited",
      "type": "(node: HTMLElement) => void",
      "required": false,
      "description": "Handler fired after the \"exited\" status is applied."
    },
    {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Style object."
    },
    {
      "name": "timeout",
      "type": "number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }",
      "defaultValue": "200",
      "required": false,
      "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
    },
    {
      "name": "unmountOnExit",
      "type": "boolean",
      "required": false,
      "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
    }
  ],
  "Typography": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "variant",
      "type": "\"display\" | \"body\" | \"caption\" | \"title\" | \"heading\" | \"bodyBold\" | \"captionBold\" | \"subtext\" | \"subtextBold\" | \"subtitle\"",
      "defaultValue": "'primary'",
      "required": false,
      "description": "The display variant of the text."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ],
  "VisuallyHidden": [
    {
      "name": "children",
      "type": "ReactNode",
      "required": false,
      "description": ""
    },
    {
      "name": "isFocusable",
      "type": "boolean",
      "required": false,
      "description": "Whether the element should become visible on focus, for example skip links."
    },
    {
      "name": "as",
      "type": "NonNullable<T>",
      "required": false,
      "description": ""
    },
    {
      "name": "css",
      "type": "CSS",
      "required": false,
      "description": "Theme aware style object."
    }
  ]
}
