{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "className": "docs-version-current",
          "path": "/docs",
          "tagsPath": "/docs/tags",
          "editUrl": "https://github.com/project44/manifest/tree/main/packages/website/docs",
          "editUrlLocalized": "https://github.com/project44/manifest/tree/main/packages/website/i18n/en/docusaurus-plugin-content-docs/current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/brandonclark/Development/manifest/packages/website/sidebars.js",
          "contentPath": "/Users/brandonclark/Development/manifest/packages/website/docs",
          "contentPathLocalized": "/Users/brandonclark/Development/manifest/packages/website/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "unversionedId": "about",
              "id": "about",
              "title": "About Manifest Design System",
              "description": "",
              "source": "@site/docs/index.mdx",
              "sourceDirName": ".",
              "slug": "/",
              "permalink": "/docs/",
              "draft": false,
              "editUrl": "https://github.com/project44/manifest/tree/main/packages/website/docs/index.mdx",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "id": "about",
                "title": "About Manifest Design System",
                "slug": "/",
                "hide_table_of_contents": true
              },
              "sidebar": "docs"
            }
          ],
          "drafts": [],
          "sidebars": {
            "docs": [
              {
                "type": "category",
                "label": "Getting Started",
                "items": [
                  {
                    "type": "doc",
                    "id": "about"
                  }
                ],
                "collapsed": false,
                "collapsible": true
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [],
      "blogListPaginated": [],
      "blogTags": {},
      "blogTagsListPath": "/blog/tags",
      "blogTagsPaginated": []
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.tsx"
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-theme-classic": {},
  "docusaurus-plugin-react-docgen-typescript": {
    "default": [
      {
        "tags": {},
        "filePath": "../react/src/components/Avatar/Avatar.styles.ts",
        "description": "",
        "displayName": "useAvatarStyles",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Avatar/Avatar.tsx",
        "description": "",
        "displayName": "Avatar",
        "methods": [],
        "props": {
          "alt": {
            "defaultValue": null,
            "description": "The alt text passed to the image.",
            "name": "alt",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "fallback": {
            "defaultValue": null,
            "description": "Name used as a fallback if src is not provided or image cannot be found.",
            "name": "fallback",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the avatar.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "src": {
            "defaultValue": null,
            "description": "The `src` attribute for the `img` element.",
            "name": "src",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Avatar/index.ts",
        "description": "",
        "displayName": "Avatar",
        "methods": [],
        "props": {
          "alt": {
            "defaultValue": null,
            "description": "The alt text passed to the image.",
            "name": "alt",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "fallback": {
            "defaultValue": null,
            "description": "Name used as a fallback if src is not provided or image cannot be found.",
            "name": "fallback",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the avatar.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "src": {
            "defaultValue": null,
            "description": "The `src` attribute for the `img` element.",
            "name": "src",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Box/Box.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Box/Box.tsx",
        "description": "",
        "displayName": "Box",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the box",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Box/Box.tsx",
              "name": "BoxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Box/Box.tsx",
                "name": "BoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Box/index.ts",
        "description": "",
        "displayName": "Box",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the box",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Box/Box.tsx",
              "name": "BoxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Box/Box.tsx",
                "name": "BoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Button/Button.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "hasEndIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasEndIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "hasStartIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasStartIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPressed": {
            "defaultValue": null,
            "description": "",
            "name": "isPressed",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "variant": {
            "defaultValue": null,
            "description": "",
            "name": "variant",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"danger\" | \"brand\" | \"primary\" | \"secondary\" | \"tertiary\" | ({ \"@lg\"?: \"danger\" | \"brand\" | \"primary\" | \"secondary\" | \"tertiary\"; \"@md\"?: \"danger\" | \"brand\" | \"primary\" | \"secondary\" | \"tertiary\"; \"@sm\"?: \"danger\" | ... 3 more ... | \"tertiary\"; \"@xl\"?: \"danger\" | ... 3 more ... | \"tertiary\"; \"@initial\"?: \"danger\" | ..."
            }
          },
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Button/Button.tsx",
        "description": "",
        "displayName": "Button",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon added after the button text.",
            "name": "endIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the button text.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Button/index.ts",
        "description": "",
        "displayName": "Button",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon added after the button text.",
            "name": "endIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the button text.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/ButtonGroup/ButtonGroup.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isAttached": {
            "defaultValue": null,
            "description": "",
            "name": "isAttached",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
        "description": "",
        "displayName": "ButtonGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The buttons within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the buttons in the button group are all disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isAttached": {
            "defaultValue": null,
            "description": "Whether the buttons in the button are attached.",
            "name": "isAttached",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the buttons in the group.",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The group variant",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/ButtonGroup/index.ts",
        "description": "",
        "displayName": "ButtonGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The buttons within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the buttons in the button group are all disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isAttached": {
            "defaultValue": null,
            "description": "Whether the buttons in the button are attached.",
            "name": "isAttached",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the buttons in the group.",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The group variant",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Calendar/Calendar.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Calendar/Calendar.tsx",
        "description": "",
        "displayName": "Calendar",
        "methods": [],
        "props": {
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Calendar/index.ts",
        "description": "",
        "displayName": "Calendar",
        "methods": [],
        "props": {
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/CalendarRange/CalendarRange.tsx",
        "description": "",
        "displayName": "CalendarRange",
        "methods": [],
        "props": {
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "RangeCalendarProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "RangeCalendarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/CalendarRange/index.ts",
        "description": "",
        "displayName": "CalendarRange",
        "methods": [],
        "props": {
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "RangeCalendarProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "RangeCalendarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Card/Card.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Card/Card.tsx",
        "description": "",
        "displayName": "Card",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Card/Card.tsx",
              "name": "CardProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Card/Card.tsx",
                "name": "CardProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Card/index.ts",
        "description": "",
        "displayName": "Card",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Card/Card.tsx",
              "name": "CardProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Card/Card.tsx",
                "name": "CardProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardBody/CardBody.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardBody/CardBody.tsx",
        "description": "",
        "displayName": "CardBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card body.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardBody/CardBody.tsx",
              "name": "CardBodyProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardBody/CardBody.tsx",
                "name": "CardBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardBody/index.ts",
        "description": "",
        "displayName": "CardBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card body.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardBody/CardBody.tsx",
              "name": "CardBodyProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardBody/CardBody.tsx",
                "name": "CardBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardFooter/CardFooter.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardFooter/CardFooter.tsx",
        "description": "",
        "displayName": "CardFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The card actions.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
              "name": "CardFooterProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
                "name": "CardFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardFooter/index.ts",
        "description": "",
        "displayName": "CardFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The card actions.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
              "name": "CardFooterProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
                "name": "CardFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardHeader/CardHeader.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardHeader/CardHeader.tsx",
        "description": "",
        "displayName": "CardHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card header.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
              "name": "CardHeaderProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
                "name": "CardHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CardHeader/index.ts",
        "description": "",
        "displayName": "CardHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card header.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
              "name": "CardHeaderProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
                "name": "CardHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Checkbox/Checkbox.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isChecked": {
            "defaultValue": null,
            "description": "",
            "name": "isChecked",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isIndeterminate": {
            "defaultValue": null,
            "description": "",
            "name": "isIndeterminate",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Checkbox/Checkbox.tsx",
        "description": "",
        "displayName": "Checkbox",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the checkbox",
            "name": "chidlren",
            "parent": {
              "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isIndeterminate": {
            "defaultValue": null,
            "description": "Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.",
            "name": "isIndeterminate",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the element.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "AriaToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "AriaToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Checkbox/index.ts",
        "description": "",
        "displayName": "Checkbox",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the checkbox",
            "name": "chidlren",
            "parent": {
              "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isIndeterminate": {
            "defaultValue": null,
            "description": "Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.",
            "name": "isIndeterminate",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the element.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "AriaToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "AriaToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Combobox/Combobox.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "hasStartIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasStartIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "isInvalid",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPlaceholder": {
            "defaultValue": null,
            "description": "",
            "name": "isPlaceholder",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Combobox/Combobox.tsx",
        "description": "",
        "displayName": "Combobox",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the combobox.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "AriaComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "AriaComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultItems": {
            "defaultValue": null,
            "description": "The list of ComboBox items (uncontrolled).",
            "name": "defaultItems",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "The list of ComboBox items (controlled).",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void"
            }
          },
          "inputValue": {
            "defaultValue": null,
            "description": "The value of the ComboBox input (controlled).",
            "name": "inputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultInputValue": {
            "defaultValue": null,
            "description": "The default value of the ComboBox input (uncontrolled).",
            "name": "defaultInputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onInputChange": {
            "defaultValue": null,
            "description": "Handler that is called when the ComboBox input value changes.",
            "name": "onInputChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "allowsCustomValue": {
            "defaultValue": null,
            "description": "Whether the ComboBox allows a non-item matching input value to be set.",
            "name": "allowsCustomValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "menuTrigger": {
            "defaultValue": {
              "value": "'input'"
            },
            "description": "The interaction required to display the ComboBox menu.",
            "name": "menuTrigger",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "MenuTriggerAction",
              "value": [
                {
                  "value": "\"manual\""
                },
                {
                  "value": "\"input\""
                },
                {
                  "value": "\"focus\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Combobox/index.ts",
        "description": "",
        "displayName": "Combobox",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the combobox.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "AriaComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "AriaComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultItems": {
            "defaultValue": null,
            "description": "The list of ComboBox items (uncontrolled).",
            "name": "defaultItems",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "The list of ComboBox items (controlled).",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void"
            }
          },
          "inputValue": {
            "defaultValue": null,
            "description": "The value of the ComboBox input (controlled).",
            "name": "inputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultInputValue": {
            "defaultValue": null,
            "description": "The default value of the ComboBox input (uncontrolled).",
            "name": "defaultInputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onInputChange": {
            "defaultValue": null,
            "description": "Handler that is called when the ComboBox input value changes.",
            "name": "onInputChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "allowsCustomValue": {
            "defaultValue": null,
            "description": "Whether the ComboBox allows a non-item matching input value to be set.",
            "name": "allowsCustomValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "menuTrigger": {
            "defaultValue": {
              "value": "'input'"
            },
            "description": "The interaction required to display the ComboBox menu.",
            "name": "menuTrigger",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "MenuTriggerAction",
              "value": [
                {
                  "value": "\"manual\""
                },
                {
                  "value": "\"input\""
                },
                {
                  "value": "\"focus\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CssBaseline/CssBaseline.tsx",
        "description": "",
        "displayName": "CssBaseline",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "../react/src/components/CssBaseline/index.ts",
        "description": "",
        "displayName": "CssBaseline",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/DatePicker/DatePicker.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "hasStartIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasStartIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "",
            "name": "isActive",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "isInvalid",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPlaceholder": {
            "defaultValue": null,
            "description": "",
            "name": "isPlaceholder",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/DatePicker/DatePicker.tsx",
        "description": "",
        "displayName": "DatePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/DatePicker/index.ts",
        "description": "",
        "displayName": "DatePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
        "description": "",
        "displayName": "DateRangePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/DateRangePicker/index.ts",
        "description": "",
        "displayName": "DateRangePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Dropdown/Dropdown.tsx",
        "description": "",
        "displayName": "Dropdown",
        "methods": [],
        "props": {
          "closeOnSelect": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the dropdown closes when a selection is made.",
            "name": "closeOnSelect",
            "parent": {
              "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
              "name": "DropdownProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
                "name": "DropdownProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Dropdown/index.ts",
        "description": "",
        "displayName": "Dropdown",
        "methods": [],
        "props": {
          "closeOnSelect": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the dropdown closes when a selection is made.",
            "name": "closeOnSelect",
            "parent": {
              "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
              "name": "DropdownProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
                "name": "DropdownProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/DropdownMenu/DropdownMenu.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/DropdownMenu/DropdownMenu.tsx",
        "description": "",
        "displayName": "DropdownMenu",
        "methods": [],
        "props": {
          "autoFocus": {
            "defaultValue": null,
            "description": "Where the focus should be set.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Handler that is called when an item is selected.",
            "name": "onAction",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLUListElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/DropdownMenu/index.ts",
        "description": "",
        "displayName": "DropdownMenu",
        "methods": [],
        "props": {
          "autoFocus": {
            "defaultValue": null,
            "description": "Where the focus should be set.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Handler that is called when an item is selected.",
            "name": "onAction",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLUListElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Flex/Flex.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": null,
            "description": "",
            "name": "align",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"center\" | \"end\" | \"start\" | \"baseline\" | ({ \"@lg\"?: \"center\" | \"end\" | \"start\" | \"baseline\"; \"@md\"?: \"center\" | \"end\" | \"start\" | \"baseline\"; \"@sm\"?: \"center\" | \"end\" | \"start\" | \"baseline\"; \"@xl\"?: \"center\" | ... 2 more ... | \"baseline\"; \"@initial\"?: \"center\" | ... 2 more ... | \"baseline\"; } & { ...; })"
            }
          },
          "orientation": {
            "defaultValue": null,
            "description": "",
            "name": "orientation",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"horizontal\" | \"vertical\" | ({ \"@lg\"?: \"horizontal\" | \"vertical\"; \"@md\"?: \"horizontal\" | \"vertical\"; \"@sm\"?: \"horizontal\" | \"vertical\"; \"@xl\"?: \"horizontal\" | \"vertical\"; \"@initial\"?: \"horizontal\" | \"vertical\"; } & { ...; })"
            }
          },
          "justify": {
            "defaultValue": null,
            "description": "",
            "name": "justify",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"center\" | \"end\" | \"start\" | \"around\" | \"between\" | ({ \"@lg\"?: \"center\" | \"end\" | \"start\" | \"around\" | \"between\"; \"@md\"?: \"center\" | \"end\" | \"start\" | \"around\" | \"between\"; \"@sm\"?: \"center\" | \"end\" | \"start\" | \"around\" | \"between\"; \"@xl\"?: \"center\" | ... 3 more ... | \"between\"; \"@initial\"?: \"center\" | ... 3 more ......"
            }
          },
          "wrap": {
            "defaultValue": null,
            "description": "",
            "name": "wrap",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Flex/Flex.tsx",
        "description": "",
        "displayName": "Flex",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the flex container.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": null,
            "description": "The aligment of the container's children.",
            "name": "align",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"baseline\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"baseline\""
                }
              ]
            }
          },
          "justify": {
            "defaultValue": null,
            "description": "The justifcation of the container's children.",
            "name": "justify",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"around\" | \"between\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"around\""
                },
                {
                  "value": "\"between\""
                }
              ]
            }
          },
          "orientation": {
            "defaultValue": null,
            "description": "The orientation of the container's children.",
            "name": "orientation",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "wrap": {
            "defaultValue": null,
            "description": "Whether the container's should wrap when overflown.",
            "name": "wrap",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Flex/index.ts",
        "description": "",
        "displayName": "Flex",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the flex container.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": null,
            "description": "The aligment of the container's children.",
            "name": "align",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"baseline\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"baseline\""
                }
              ]
            }
          },
          "justify": {
            "defaultValue": null,
            "description": "The justifcation of the container's children.",
            "name": "justify",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"around\" | \"between\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"around\""
                },
                {
                  "value": "\"between\""
                }
              ]
            }
          },
          "orientation": {
            "defaultValue": null,
            "description": "The orientation of the container's children.",
            "name": "orientation",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "wrap": {
            "defaultValue": null,
            "description": "Whether the container's should wrap when overflown.",
            "name": "wrap",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/FormControl/FormControl.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "isInvalid",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "orientation": {
            "defaultValue": null,
            "description": "",
            "name": "orientation",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"horizontal\" | \"vertical\" | ({ \"@lg\"?: \"horizontal\" | \"vertical\"; \"@md\"?: \"horizontal\" | \"vertical\"; \"@sm\"?: \"horizontal\" | \"vertical\"; \"@xl\"?: \"horizontal\" | \"vertical\"; \"@initial\"?: \"horizontal\" | \"vertical\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/FormControl/FormControl.tsx",
        "description": "",
        "displayName": "FormControl",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The input within the form control.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text appended to the input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text element.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The label for the form control input element.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label element.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the form control.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/FormControl/index.ts",
        "description": "",
        "displayName": "FormControl",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The input within the form control.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text appended to the input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text element.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The label for the form control input element.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label element.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the form control.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Icon/Icon.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Icon/Icon.tsx",
        "description": "",
        "displayName": "Icon",
        "methods": [],
        "props": {
          "icon": {
            "defaultValue": null,
            "description": "The material-icons icon name",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Icon/Icon.tsx",
              "name": "IconProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Icon/Icon.tsx",
                "name": "IconProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Icon/index.ts",
        "description": "",
        "displayName": "Icon",
        "methods": [],
        "props": {
          "icon": {
            "defaultValue": null,
            "description": "The material-icons icon name",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Icon/Icon.tsx",
              "name": "IconProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Icon/Icon.tsx",
                "name": "IconProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/IconButton/IconButton.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/IconButton/IconButton.tsx",
        "description": "",
        "displayName": "IconButton",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/IconButton/index.ts",
        "description": "",
        "displayName": "IconButton",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarCell/CalendarCell.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isRangeEnd": {
            "defaultValue": null,
            "description": "",
            "name": "isRangeEnd",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isRangeSelection": {
            "defaultValue": null,
            "description": "",
            "name": "isRangeSelection",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isRangeStart": {
            "defaultValue": null,
            "description": "",
            "name": "isRangeStart",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "",
            "name": "isSelected",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSelectionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "isSelectionEnd",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSelectionStart": {
            "defaultValue": null,
            "description": "",
            "name": "isSelectionStart",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isToday": {
            "defaultValue": null,
            "description": "",
            "name": "isToday",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isUnavailable": {
            "defaultValue": null,
            "description": "",
            "name": "isUnavailable",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {
          "private": ""
        },
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
        "description": "",
        "displayName": "CalendarCell",
        "methods": [],
        "props": {
          "currentMonth": {
            "defaultValue": null,
            "description": "The current month to helpe determine out of range dates.",
            "name": "currentMonth",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarDate"
            }
          },
          "date": {
            "defaultValue": null,
            "description": "The date that this cell represents.",
            "name": "date",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarDate"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {
          "private": ""
        },
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarCell/index.ts",
        "description": "",
        "displayName": "CalendarCell",
        "methods": [],
        "props": {
          "currentMonth": {
            "defaultValue": null,
            "description": "The current month to helpe determine out of range dates.",
            "name": "currentMonth",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarDate"
            }
          },
          "date": {
            "defaultValue": null,
            "description": "The date that this cell represents.",
            "name": "date",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarDate"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
              "name": "CalendarCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarCell/CalendarCell.tsx",
                "name": "CalendarCellProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarHeader/CalendarHeader.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
        "description": "",
        "displayName": "CalendarHeader",
        "methods": [],
        "props": {
          "nextButtonProps": {
            "defaultValue": null,
            "description": "Props passed to the next button",
            "name": "nextButtonProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "IconButtonProps"
            }
          },
          "prevButtonProps": {
            "defaultValue": null,
            "description": "Props passed to the previous button.",
            "name": "prevButtonProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "IconButtonProps"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarHeader/index.ts",
        "description": "",
        "displayName": "CalendarHeader",
        "methods": [],
        "props": {
          "nextButtonProps": {
            "defaultValue": null,
            "description": "Props passed to the next button",
            "name": "nextButtonProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "IconButtonProps"
            }
          },
          "prevButtonProps": {
            "defaultValue": null,
            "description": "Props passed to the previous button.",
            "name": "prevButtonProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "IconButtonProps"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
              "name": "CalendarHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarHeader/CalendarHeader.tsx",
                "name": "CalendarHeaderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarTable/CalendarTable.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {
          "private": ""
        },
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarTable/CalendarTable.tsx",
        "description": "",
        "displayName": "CalendarTable",
        "methods": [],
        "props": {
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarTable/CalendarTable.tsx",
              "name": "CalendarTableProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarTable/CalendarTable.tsx",
                "name": "CalendarTableProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {
          "private": ""
        },
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/CalendarTable/index.ts",
        "description": "",
        "displayName": "CalendarTable",
        "methods": [],
        "props": {
          "state": {
            "defaultValue": null,
            "description": "The calendar state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/CalendarTable/CalendarTable.tsx",
              "name": "CalendarTableProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/CalendarTable/CalendarTable.tsx",
                "name": "CalendarTableProps"
              }
            ],
            "required": true,
            "type": {
              "name": "CalendarState | RangeCalendarState"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownItem/DropdownItem.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPressed": {
            "defaultValue": null,
            "description": "",
            "name": "isPressed",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "",
            "name": "isSelected",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
        "description": "",
        "displayName": "DropdownItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon added after the button text.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "isVirtualized": {
            "defaultValue": null,
            "description": "Whether the item is virtualized.",
            "name": "isVirtualized",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the button text.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "Collection state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "TreeState<object>"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownItem/index.ts",
        "description": "",
        "displayName": "DropdownItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon added after the button text.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "isVirtualized": {
            "defaultValue": null,
            "description": "Whether the item is virtualized.",
            "name": "isVirtualized",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the button text.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "Collection state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "TreeState<object>"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
              "name": "DropdownItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownItem/DropdownItem.tsx",
                "name": "DropdownItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownSection/DropdownSection.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
        "description": "",
        "displayName": "DropdownSection",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The items within the section.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "Tree state of the collection.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "TreeState<object>"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The section label.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/DropdownSection/index.ts",
        "description": "",
        "displayName": "DropdownSection",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The items within the section.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "state": {
            "defaultValue": null,
            "description": "Tree state of the collection.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "TreeState<object>"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The section label.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
              "name": "DropdownSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/DropdownSection/DropdownSection.tsx",
                "name": "DropdownSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxBase/index.ts",
        "description": "",
        "displayName": "ListBoxBase",
        "methods": [],
        "props": {
          "state": {
            "defaultValue": null,
            "description": "The collection list state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxBase/ListBoxBase.tsx",
              "name": "ListBoxBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxBase/ListBoxBase.tsx",
                "name": "ListBoxBaseProps"
              }
            ],
            "required": true,
            "type": {
              "name": "ListState<object>"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether to auto focus the listbox or an option.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether focus should wrap around when the end/start is reached.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxBase/ListBoxBase.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxBase/ListBoxBase.tsx",
        "description": "",
        "displayName": "ListBoxBase",
        "methods": [],
        "props": {
          "state": {
            "defaultValue": null,
            "description": "The collection list state.",
            "name": "state",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxBase/ListBoxBase.tsx",
              "name": "ListBoxBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxBase/ListBoxBase.tsx",
                "name": "ListBoxBaseProps"
              }
            ],
            "required": true,
            "type": {
              "name": "ListState<object>"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether to auto focus the listbox or an option.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether focus should wrap around when the end/start is reached.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxItem/index.ts",
        "description": "",
        "displayName": "ListBoxItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isVirtualized": {
            "defaultValue": null,
            "description": "Whether the item is virtualized.",
            "name": "isVirtualized",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the item text.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxItem/ListBoxItem.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPressed": {
            "defaultValue": null,
            "description": "",
            "name": "isPressed",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "",
            "name": "isSelected",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
        "description": "",
        "displayName": "ListBoxItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isVirtualized": {
            "defaultValue": null,
            "description": "Whether the item is virtualized.",
            "name": "isVirtualized",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the item text.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Callback executed on item select.",
            "name": "onAction",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
              "name": "ListBoxItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxItem/ListBoxItem.tsx",
                "name": "ListBoxItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxSection/index.ts",
        "description": "",
        "displayName": "ListBoxSection",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the section.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The section label.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxSection/ListBoxSection.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
        "description": "",
        "displayName": "ListBoxSection",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the section.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "item": {
            "defaultValue": null,
            "description": "Item object in the collection.",
            "name": "item",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": true,
            "type": {
              "name": "Node<object>"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The section label.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
              "name": "ListBoxSectionProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/ListBoxSection/ListBoxSection.tsx",
                "name": "ListBoxSectionProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/internal/PaginationItem/index.ts",
        "description": "",
        "displayName": "PaginationItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
              "name": "PaginationItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
                "name": "PaginationItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "Whether the pagination item is active.",
            "name": "isActive",
            "parent": {
              "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
              "name": "PaginationItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
                "name": "PaginationItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/PaginationItem/PaginationItem.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isActive": {
            "defaultValue": null,
            "description": "",
            "name": "isActive",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPressed": {
            "defaultValue": null,
            "description": "",
            "name": "isPressed",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
        "description": "",
        "displayName": "PaginationItem",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the item.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
              "name": "PaginationItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
                "name": "PaginationItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "Whether the pagination item is active.",
            "name": "isActive",
            "parent": {
              "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
              "name": "PaginationItemProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/PaginationItem/PaginationItem.tsx",
                "name": "PaginationItemProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/internal/TextFieldBase/index.ts",
        "description": "",
        "displayName": "TextFieldBase",
        "methods": [],
        "props": {
          "endIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the end of the text field.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/TextFieldBase/TextFieldBase.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "hasEndIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasEndIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "hasStartIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasStartIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "isInvalid",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
        "description": "",
        "displayName": "TextFieldBase",
        "methods": [],
        "props": {
          "endIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the end of the text field.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Link/index.ts",
        "description": "",
        "displayName": "Link",
        "methods": [],
        "props": {
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              },
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "media": {
            "defaultValue": null,
            "description": "",
            "name": "media",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "type": {
            "defaultValue": null,
            "description": "",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributeAnchorTarget"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "download": {
            "defaultValue": null,
            "description": "",
            "name": "download",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "hrefLang": {
            "defaultValue": null,
            "description": "",
            "name": "hrefLang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "ping": {
            "defaultValue": null,
            "description": "",
            "name": "ping",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "referrerPolicy": {
            "defaultValue": null,
            "description": "",
            "name": "referrerPolicy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "HTMLAttributeReferrerPolicy",
              "value": [
                {
                  "value": "\"\""
                },
                {
                  "value": "\"no-referrer\""
                },
                {
                  "value": "\"no-referrer-when-downgrade\""
                },
                {
                  "value": "\"origin\""
                },
                {
                  "value": "\"origin-when-cross-origin\""
                },
                {
                  "value": "\"same-origin\""
                },
                {
                  "value": "\"strict-origin\""
                },
                {
                  "value": "\"strict-origin-when-cross-origin\""
                },
                {
                  "value": "\"unsafe-url\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLAnchorElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Link/Link.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Link/Link.tsx",
        "description": "",
        "displayName": "Link",
        "methods": [],
        "props": {
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              },
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "media": {
            "defaultValue": null,
            "description": "",
            "name": "media",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "type": {
            "defaultValue": null,
            "description": "",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributeAnchorTarget"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "download": {
            "defaultValue": null,
            "description": "",
            "name": "download",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "hrefLang": {
            "defaultValue": null,
            "description": "",
            "name": "hrefLang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "ping": {
            "defaultValue": null,
            "description": "",
            "name": "ping",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "referrerPolicy": {
            "defaultValue": null,
            "description": "",
            "name": "referrerPolicy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "HTMLAttributeReferrerPolicy",
              "value": [
                {
                  "value": "\"\""
                },
                {
                  "value": "\"no-referrer\""
                },
                {
                  "value": "\"no-referrer-when-downgrade\""
                },
                {
                  "value": "\"origin\""
                },
                {
                  "value": "\"origin-when-cross-origin\""
                },
                {
                  "value": "\"same-origin\""
                },
                {
                  "value": "\"strict-origin\""
                },
                {
                  "value": "\"strict-origin-when-cross-origin\""
                },
                {
                  "value": "\"unsafe-url\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLAnchorElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/ListBox/index.ts",
        "description": "",
        "displayName": "ListBox",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether to auto focus the listbox or an option.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether focus should wrap around when the end/start is reached.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/ListBox/ListBox.tsx",
        "description": "",
        "displayName": "ListBox",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether to auto focus the listbox or an option.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether focus should wrap around when the end/start is reached.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Pagination/index.ts",
        "description": "",
        "displayName": "Pagination",
        "methods": [],
        "props": {
          "boundaries": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The outer visible boundaries of the pagination list.",
            "name": "boundaries",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "defaultPage": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The default page number (uncontrolled).",
            "name": "defaultPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "page": {
            "defaultValue": null,
            "description": "The current page (controlled).",
            "name": "page",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "rowsPerPage": {
            "defaultValue": {
              "value": "10"
            },
            "description": "The number of rows rendered per page.",
            "name": "rowsPerPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "showPageNumbers": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to show page numbers buttons.",
            "name": "showPageNumbers",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "siblings": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The number of pages to display before and after the current selected page.",
            "name": "siblings",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "totalRowCount": {
            "defaultValue": null,
            "description": "The total number of rows in the table.",
            "name": "totalRowCount",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Callback executed on page change.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(page: number) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Pagination/Pagination.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Pagination/Pagination.tsx",
        "description": "",
        "displayName": "Pagination",
        "methods": [],
        "props": {
          "boundaries": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The outer visible boundaries of the pagination list.",
            "name": "boundaries",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "defaultPage": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The default page number (uncontrolled).",
            "name": "defaultPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "page": {
            "defaultValue": null,
            "description": "The current page (controlled).",
            "name": "page",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "rowsPerPage": {
            "defaultValue": {
              "value": "10"
            },
            "description": "The number of rows rendered per page.",
            "name": "rowsPerPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "showPageNumbers": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to show page numbers buttons.",
            "name": "showPageNumbers",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "siblings": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The number of pages to display before and after the current selected page.",
            "name": "siblings",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "totalRowCount": {
            "defaultValue": null,
            "description": "The total number of rows in the table.",
            "name": "totalRowCount",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Callback executed on page change.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(page: number) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Pill/index.ts",
        "description": "",
        "displayName": "Pill",
        "methods": [],
        "props": {
          "colorScheme": {
            "defaultValue": {
              "value": "'indigo'"
            },
            "description": "The color scheme of the pill",
            "name": "colorScheme",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"indigo\" | \"red\"",
              "value": [
                {
                  "value": "\"indigo\""
                },
                {
                  "value": "\"red\""
                }
              ]
            }
          },
          "icon": {
            "defaultValue": null,
            "description": "The icon to render in the pill.",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isCollapsible": {
            "defaultValue": {
              "value": "'false'"
            },
            "description": "Whether the pill is collapsible.",
            "name": "isCollapsible",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The text label of the pill.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Pill/Pill.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "colorScheme": {
            "defaultValue": null,
            "description": "",
            "name": "colorScheme",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"indigo\" | \"red\" | ({ \"@lg\"?: \"indigo\" | \"red\"; \"@md\"?: \"indigo\" | \"red\"; \"@sm\"?: \"indigo\" | \"red\"; \"@xl\"?: \"indigo\" | \"red\"; \"@initial\"?: \"indigo\" | \"red\"; } & { [x: string]: \"indigo\" | \"red\"; })"
            }
          },
          "isCollapsible": {
            "defaultValue": null,
            "description": "",
            "name": "isCollapsible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "",
            "name": "isOpen",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Pill/Pill.tsx",
        "description": "",
        "displayName": "Pill",
        "methods": [],
        "props": {
          "colorScheme": {
            "defaultValue": {
              "value": "'indigo'"
            },
            "description": "The color scheme of the pill",
            "name": "colorScheme",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"indigo\" | \"red\"",
              "value": [
                {
                  "value": "\"indigo\""
                },
                {
                  "value": "\"red\""
                }
              ]
            }
          },
          "icon": {
            "defaultValue": null,
            "description": "The icon to render in the pill.",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isCollapsible": {
            "defaultValue": {
              "value": "'false'"
            },
            "description": "Whether the pill is collapsible.",
            "name": "isCollapsible",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The text label of the pill.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Popover/index.ts",
        "description": "",
        "displayName": "Popover",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the popover.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDismissable": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to close the popover when the user interacts outside it.",
            "name": "isDismissable",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isKeyboardDismissDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether pressing the escape key to close the popover should be disabled.",
            "name": "isKeyboardDismissDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the popover is open.",
            "name": "isOpen",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isNonModal": {
            "defaultValue": null,
            "description": "Whether the popover should not behave as a modal.",
            "name": "isNonModal",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "shouldCloseOnBlur": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the popover should close when focus is lost or moves outside it.",
            "name": "shouldCloseOnBlur",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onClose": {
            "defaultValue": null,
            "description": "Handler that is called when the popover should close.",
            "name": "onClose",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "shouldCloseOnInteractOutside": {
            "defaultValue": null,
            "description": "When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref.",
            "name": "shouldCloseOnInteractOutside",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(element: HTMLElement) => boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Popover/Popover.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Popover/Popover.tsx",
        "description": "",
        "displayName": "Popover",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the popover.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDismissable": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to close the popover when the user interacts outside it.",
            "name": "isDismissable",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isKeyboardDismissDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether pressing the escape key to close the popover should be disabled.",
            "name": "isKeyboardDismissDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the popover is open.",
            "name": "isOpen",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isNonModal": {
            "defaultValue": null,
            "description": "Whether the popover should not behave as a modal.",
            "name": "isNonModal",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "shouldCloseOnBlur": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the popover should close when focus is lost or moves outside it.",
            "name": "shouldCloseOnBlur",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onClose": {
            "defaultValue": null,
            "description": "Handler that is called when the popover should close.",
            "name": "onClose",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "shouldCloseOnInteractOutside": {
            "defaultValue": null,
            "description": "When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref.",
            "name": "shouldCloseOnInteractOutside",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(element: HTMLElement) => boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Portal/index.ts",
        "description": "",
        "displayName": "Portal",
        "methods": [],
        "props": {
          "containerRef": {
            "defaultValue": null,
            "description": "The ref of the element to append the children to.",
            "name": "containerRef",
            "parent": {
              "fileName": "packages/react/src/components/Portal/Portal.tsx",
              "name": "PortalProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Portal/Portal.tsx",
                "name": "PortalProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Portal/Portal.tsx",
        "description": "",
        "displayName": "Portal",
        "methods": [],
        "props": {
          "containerRef": {
            "defaultValue": null,
            "description": "The ref of the element to append the children to.",
            "name": "containerRef",
            "parent": {
              "fileName": "packages/react/src/components/Portal/Portal.tsx",
              "name": "PortalProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Portal/Portal.tsx",
                "name": "PortalProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Provider/index.ts",
        "description": "",
        "displayName": "Provider",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "Content to be wrapped by the provider.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "ReactNode"
            }
          },
          "disableCSSBaseline": {
            "defaultValue": {
              "value": "false;"
            },
            "description": "Whether to disable the baseline css.",
            "name": "disableCSSBaseline",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Provider/Provider.tsx",
        "description": "",
        "displayName": "Provider",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "Content to be wrapped by the provider.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "ReactNode"
            }
          },
          "disableCSSBaseline": {
            "defaultValue": {
              "value": "false;"
            },
            "description": "Whether to disable the baseline css.",
            "name": "disableCSSBaseline",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Radio/index.ts",
        "description": "",
        "displayName": "Radio",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Radio/Radio.tsx",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Radio/Radio.tsx",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the radio button, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": true,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the Radio. Accepts any renderable node.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the radio button is disabled or not.\nShows that a selection exists, but is not available in that circumstance.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Radio/Radio.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isChecked": {
            "defaultValue": null,
            "description": "",
            "name": "isChecked",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Radio/Radio.tsx",
        "description": "",
        "displayName": "Radio",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Radio/Radio.tsx",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Radio/Radio.tsx",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the radio button, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": true,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the Radio. Accepts any renderable node.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the radio button is disabled or not.\nShows that a selection exists, but is not available in that circumstance.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/RadioGroup/index.ts",
        "description": "",
        "displayName": "RadioGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The radios within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the radio group.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the RadioGroup, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The content to display as the label.",
            "name": "label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
              "name": "LabelableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
                "name": "LabelableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/RadioGroup/RadioGroup.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "orientation": {
            "defaultValue": null,
            "description": "",
            "name": "orientation",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"horizontal\" | \"vertical\" | ({ \"@lg\"?: \"horizontal\" | \"vertical\"; \"@md\"?: \"horizontal\" | \"vertical\"; \"@sm\"?: \"horizontal\" | \"vertical\"; \"@xl\"?: \"horizontal\" | \"vertical\"; \"@initial\"?: \"horizontal\" | \"vertical\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/RadioGroup/RadioGroup.tsx",
        "description": "",
        "displayName": "RadioGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The radios within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the radio group.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the RadioGroup, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The content to display as the label.",
            "name": "label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
              "name": "LabelableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
                "name": "LabelableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Select/index.ts",
        "description": "",
        "displayName": "Select",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "autoComplete": {
            "defaultValue": null,
            "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",
            "name": "autoComplete",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input, used when submitting an HTML form.",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Sets the open state of the menu.",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Sets the default open state of the menu.",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "shouldFlip": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the menu should automatically flip direction when space is limited.",
            "name": "shouldFlip",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "isLoading": {
            "defaultValue": null,
            "description": "Whether the items are currently loading.",
            "name": "isLoading",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onLoadMore": {
            "defaultValue": null,
            "description": "Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",
            "name": "onLoadMore",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "() => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Select/Select.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "hasStartIcon": {
            "defaultValue": null,
            "description": "",
            "name": "hasStartIcon",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "",
            "name": "isActive",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocused": {
            "defaultValue": null,
            "description": "",
            "name": "isFocused",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "isInvalid",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPlaceholder": {
            "defaultValue": null,
            "description": "",
            "name": "isPlaceholder",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isPressed": {
            "defaultValue": null,
            "description": "",
            "name": "isPressed",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Select/Select.tsx",
        "description": "",
        "displayName": "Select",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "autoComplete": {
            "defaultValue": null,
            "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",
            "name": "autoComplete",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input, used when submitting an HTML form.",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Sets the open state of the menu.",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Sets the default open state of the menu.",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "shouldFlip": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the menu should automatically flip direction when space is limited.",
            "name": "shouldFlip",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "isLoading": {
            "defaultValue": null,
            "description": "Whether the items are currently loading.",
            "name": "isLoading",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onLoadMore": {
            "defaultValue": null,
            "description": "Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",
            "name": "onLoadMore",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "() => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Separator/index.ts",
        "description": "",
        "displayName": "Separator",
        "methods": [],
        "props": {
          "orientation": {
            "defaultValue": {
              "value": "'horizontal"
            },
            "description": "The orientation of the separator.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/Separator/Separator.tsx",
              "name": "SeparatorProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Separator/Separator.tsx",
                "name": "SeparatorProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Separator/Separator.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "orientation": {
            "defaultValue": null,
            "description": "",
            "name": "orientation",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"horizontal\" | \"vertical\" | ({ \"@lg\"?: \"horizontal\" | \"vertical\"; \"@md\"?: \"horizontal\" | \"vertical\"; \"@sm\"?: \"horizontal\" | \"vertical\"; \"@xl\"?: \"horizontal\" | \"vertical\"; \"@initial\"?: \"horizontal\" | \"vertical\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Separator/Separator.tsx",
        "description": "",
        "displayName": "Separator",
        "methods": [],
        "props": {
          "orientation": {
            "defaultValue": {
              "value": "'horizontal"
            },
            "description": "The orientation of the separator.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/Separator/Separator.tsx",
              "name": "SeparatorProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Separator/Separator.tsx",
                "name": "SeparatorProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Switch/index.ts",
        "description": "",
        "displayName": "Switch",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Switch/Switch.tsx",
              "name": "SwitchProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Switch/Switch.tsx",
                "name": "SwitchProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content to render as the Switch's label.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the Switch's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "AriaSwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "AriaSwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Switch/Switch.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isChecked": {
            "defaultValue": null,
            "description": "",
            "name": "isChecked",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "",
            "name": "isDisabled",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Switch/Switch.tsx",
        "description": "",
        "displayName": "Switch",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Switch/Switch.tsx",
              "name": "SwitchProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Switch/Switch.tsx",
                "name": "SwitchProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content to render as the Switch's label.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the Switch's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "AriaSwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "AriaSwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Table/index.ts",
        "description": "",
        "displayName": "Table",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the table.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.tsx",
              "name": "TableProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.tsx",
                "name": "TableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "showHover": {
            "defaultValue": null,
            "description": "",
            "name": "showHover",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Table/Table.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Table/Table.tsx",
        "description": "",
        "displayName": "Table",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the table.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.tsx",
              "name": "TableProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.tsx",
                "name": "TableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "showHover": {
            "defaultValue": null,
            "description": "",
            "name": "showHover",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableBody/index.ts",
        "description": "",
        "displayName": "TableBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the body.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
              "name": "TableBodyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
                "name": "TableBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableBody/TableBody.tsx",
        "description": "",
        "displayName": "TableBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the body.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
              "name": "TableBodyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
                "name": "TableBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableCell/index.ts",
        "description": "",
        "displayName": "TableCell",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the cell.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table cell.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableDataCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableCell/TableCell.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": null,
            "description": "",
            "name": "align",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"left\" | \"right\" | \"center\" | \"justify\" | ({ \"@lg\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@md\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@sm\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@xl\"?: \"left\" | ... 2 more ... | \"justify\"; \"@initial\"?: \"left\" | ... 2 more ... | \"justify\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableCell/TableCell.tsx",
        "description": "",
        "displayName": "TableCell",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the cell.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table cell.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableDataCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableColumn/index.ts",
        "description": "",
        "displayName": "TableColumn",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table column.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the column.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "Whether the current column is actively sorted.",
            "name": "isActive",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSortable": {
            "defaultValue": null,
            "description": "Whether the column supports sorting.",
            "name": "isSortable",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "sortDirection": {
            "defaultValue": {
              "value": "'asc'"
            },
            "description": "The sort direction of the column.",
            "name": "sortDirection",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"desc\" | \"asc\"",
              "value": [
                {
                  "value": "\"desc\""
                },
                {
                  "value": "\"asc\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Callback executed on column click, used for column sort only.",
            "name": "onClick",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableHeaderCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableColumn/TableColumn.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": null,
            "description": "",
            "name": "align",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"left\" | \"right\" | \"center\" | \"justify\" | ({ \"@lg\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@md\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@sm\"?: \"left\" | \"right\" | \"center\" | \"justify\"; \"@xl\"?: \"left\" | ... 2 more ... | \"justify\"; \"@initial\"?: \"left\" | ... 2 more ... | \"justify\"; } & { ...; })"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "",
            "name": "isActive",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "isSortable": {
            "defaultValue": null,
            "description": "",
            "name": "isSortable",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableColumn/TableColumn.tsx",
        "description": "",
        "displayName": "TableColumn",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table column.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the column.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "Whether the current column is actively sorted.",
            "name": "isActive",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSortable": {
            "defaultValue": null,
            "description": "Whether the column supports sorting.",
            "name": "isSortable",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "sortDirection": {
            "defaultValue": {
              "value": "'asc'"
            },
            "description": "The sort direction of the column.",
            "name": "sortDirection",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"desc\" | \"asc\"",
              "value": [
                {
                  "value": "\"desc\""
                },
                {
                  "value": "\"asc\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Callback executed on column click, used for column sort only.",
            "name": "onClick",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableHeaderCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableFooter/index.ts",
        "description": "",
        "displayName": "TableFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the footer.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
              "name": "TableFooterProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
                "name": "TableFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableFooter/TableFooter.tsx",
        "description": "",
        "displayName": "TableFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the footer.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
              "name": "TableFooterProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
                "name": "TableFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableHeader/index.ts",
        "description": "",
        "displayName": "TableHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the header.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
              "name": "TableHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
                "name": "TableHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableHeader/TableHeader.tsx",
        "description": "",
        "displayName": "TableHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the header.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
              "name": "TableHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
                "name": "TableHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TableRow/index.ts",
        "description": "",
        "displayName": "TableRow",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The cells within the row.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "Handler called on mouse leave.",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableRowElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableRow/TableRow.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isHovered": {
            "defaultValue": null,
            "description": "",
            "name": "isHovered",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TableRow/TableRow.tsx",
        "description": "",
        "displayName": "TableRow",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The cells within the row.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "Handler called on mouse leave.",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableRowElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Tag/index.ts",
        "description": "",
        "displayName": "Tag",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The tag label.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isRemovable": {
            "defaultValue": null,
            "description": "Whether the tag is removeable.",
            "name": "isRemovable",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onRemove": {
            "defaultValue": null,
            "description": "Handler called on tag removable.",
            "name": "onRemove",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Tag/Tag.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "isRemovable": {
            "defaultValue": null,
            "description": "",
            "name": "isRemovable",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Tag/Tag.tsx",
        "description": "",
        "displayName": "Tag",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The tag label.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isRemovable": {
            "defaultValue": null,
            "description": "Whether the tag is removeable.",
            "name": "isRemovable",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onRemove": {
            "defaultValue": null,
            "description": "Handler called on tag removable.",
            "name": "onRemove",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TextArea/index.ts",
        "description": "",
        "displayName": "TextArea",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TextArea/TextArea.tsx",
        "description": "",
        "displayName": "TextArea",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/TextField/index.ts",
        "description": "",
        "displayName": "TextField",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the end of the text field.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TextField/TextField.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": null,
            "description": "",
            "name": "size",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"medium\" | \"small\" | ({ \"@lg\"?: \"medium\" | \"small\"; \"@md\"?: \"medium\" | \"small\"; \"@sm\"?: \"medium\" | \"small\"; \"@xl\"?: \"medium\" | \"small\"; \"@initial\"?: \"medium\" | \"small\"; } & { [x: string]: \"medium\" | \"small\"; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/TextField/TextField.tsx",
        "description": "",
        "displayName": "TextField",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the end of the text field.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/Tooltip/index.ts",
        "description": "",
        "displayName": "Tooltip",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The element to attach the tooltip to.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the tooltip should be disabled, independent from the trigger.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placement": {
            "defaultValue": {
              "value": "'top'"
            },
            "description": "The placement of the element with respect to its anchor element.",
            "name": "placement",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"bottom\" | \"left\" | \"right\" | \"top\" | \"end\" | \"start\"",
              "value": [
                {
                  "value": "\"bottom\""
                },
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"top\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                }
              ]
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The content rendered within the tooltip.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Tooltip/Tooltip.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Tooltip/Tooltip.tsx",
        "description": "",
        "displayName": "Tooltip",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The element to attach the tooltip to.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the tooltip should be disabled, independent from the trigger.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placement": {
            "defaultValue": {
              "value": "'top'"
            },
            "description": "The placement of the element with respect to its anchor element.",
            "name": "placement",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"bottom\" | \"left\" | \"right\" | \"top\" | \"end\" | \"start\"",
              "value": [
                {
                  "value": "\"bottom\""
                },
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"top\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                }
              ]
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The content rendered within the tooltip.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Typography/index.ts",
        "description": "",
        "displayName": "Typography",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The text content of the typography component.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the text.",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"display\" | \"heading\" | \"title\" | \"subtitle\" | \"body\" | \"subtext\" | \"caption\" | \"bodyBold\" | \"captionBold\" | \"subtextBold\"",
              "value": [
                {
                  "value": "\"display\""
                },
                {
                  "value": "\"heading\""
                },
                {
                  "value": "\"title\""
                },
                {
                  "value": "\"subtitle\""
                },
                {
                  "value": "\"body\""
                },
                {
                  "value": "\"subtext\""
                },
                {
                  "value": "\"caption\""
                },
                {
                  "value": "\"bodyBold\""
                },
                {
                  "value": "\"captionBold\""
                },
                {
                  "value": "\"subtextBold\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Typography/Typography.styles.ts",
        "description": "",
        "displayName": "useStyles",
        "methods": [],
        "props": {
          "paragraph": {
            "defaultValue": null,
            "description": "",
            "name": "paragraph",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | ({ \"@lg\"?: boolean | \"true\"; \"@md\"?: boolean | \"true\"; \"@sm\"?: boolean | \"true\"; \"@xl\"?: boolean | \"true\"; \"@initial\"?: boolean | \"true\"; } & { [x: string]: boolean | \"true\"; })"
            }
          },
          "variant": {
            "defaultValue": null,
            "description": "",
            "name": "variant",
            "declarations": [],
            "required": false,
            "type": {
              "name": "\"display\" | \"heading\" | \"title\" | \"subtitle\" | \"body\" | \"subtext\" | \"caption\" | \"bodyBold\" | \"captionBold\" | \"subtextBold\" | ({ \"@lg\"?: \"display\" | \"heading\" | \"title\" | \"subtitle\" | ... 5 more ... | \"subtextBold\"; \"@md\"?: \"display\" | ... 8 more ... | \"subtextBold\"; \"@sm\"?: \"display\" | ... 8 more ... | \"subtextBold\"..."
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/Typography/Typography.tsx",
        "description": "",
        "displayName": "Typography",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The text content of the typography component.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the text.",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"display\" | \"heading\" | \"title\" | \"subtitle\" | \"body\" | \"subtext\" | \"caption\" | \"bodyBold\" | \"captionBold\" | \"subtextBold\"",
              "value": [
                {
                  "value": "\"display\""
                },
                {
                  "value": "\"heading\""
                },
                {
                  "value": "\"title\""
                },
                {
                  "value": "\"subtitle\""
                },
                {
                  "value": "\"body\""
                },
                {
                  "value": "\"subtext\""
                },
                {
                  "value": "\"caption\""
                },
                {
                  "value": "\"bodyBold\""
                },
                {
                  "value": "\"captionBold\""
                },
                {
                  "value": "\"subtextBold\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/components/VisuallyHidden/index.ts",
        "description": "VisuallyHidden hides its children visually, while keeping content visible\nto screen readers.",
        "displayName": "VisuallyHidden",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content to visually hide.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'div'"
            },
            "description": "The element type for the container.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string | JSXElementConstructor<any>"
            }
          },
          "isFocusable": {
            "defaultValue": null,
            "description": "Whether the element should become visible on focus, for example skip links.",
            "name": "isFocusable",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/components/VisuallyHidden/VisuallyHidden.tsx",
        "description": "VisuallyHidden hides its children visually, while keeping content visible\nto screen readers.",
        "displayName": "VisuallyHidden",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content to visually hide.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'div'"
            },
            "description": "The element type for the container.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string | JSXElementConstructor<any>"
            }
          },
          "isFocusable": {
            "defaultValue": null,
            "description": "Whether the element should become visible on focus, for example skip links.",
            "name": "isFocusable",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Avatar",
        "methods": [],
        "props": {
          "alt": {
            "defaultValue": null,
            "description": "The alt text passed to the image.",
            "name": "alt",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "fallback": {
            "defaultValue": null,
            "description": "Name used as a fallback if src is not provided or image cannot be found.",
            "name": "fallback",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the avatar.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "src": {
            "defaultValue": null,
            "description": "The `src` attribute for the `img` element.",
            "name": "src",
            "parent": {
              "fileName": "../react/src/components/Avatar/Avatar.tsx",
              "name": "AvatarProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Avatar/Avatar.tsx",
                "name": "AvatarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Box",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the box",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Box/Box.tsx",
              "name": "BoxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Box/Box.tsx",
                "name": "BoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Button",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon added after the button text.",
            "name": "endIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon added before the button text.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "ButtonGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The buttons within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the buttons in the button group are all disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isAttached": {
            "defaultValue": null,
            "description": "Whether the buttons in the button are attached.",
            "name": "isAttached",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the buttons in the group.",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The group variant",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
              "name": "ButtonGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/ButtonGroup/ButtonGroup.tsx",
                "name": "ButtonGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Calendar",
        "methods": [],
        "props": {
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "CalendarRange",
        "methods": [],
        "props": {
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "RangeCalendarProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "RangeCalendarProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "isDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the calendar value is immutable.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to automatically focus the calendar when it mounts.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "focusedValue": {
            "defaultValue": null,
            "description": "Controls the currently focused date within the calendar.",
            "name": "focusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultFocusedValue": {
            "defaultValue": null,
            "description": "The date that is focused when the calendar first mounts (uncountrolled).",
            "name": "defaultFocusedValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the focused date changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: CalendarDate) => void"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the current selection is valid or invalid according to application logic.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message to display when the selected value is invalid.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
              "name": "CalendarPropsBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/calendar/src/index.d.ts",
                "name": "CalendarPropsBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Card",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Card/Card.tsx",
              "name": "CardProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Card/Card.tsx",
                "name": "CardProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "CardBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card body.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardBody/CardBody.tsx",
              "name": "CardBodyProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardBody/CardBody.tsx",
                "name": "CardBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "CardFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The card actions.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
              "name": "CardFooterProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardFooter/CardFooter.tsx",
                "name": "CardFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "CardHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the card header.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
              "name": "CardHeaderProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/CardHeader/CardHeader.tsx",
                "name": "CardHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Checkbox",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the checkbox",
            "name": "chidlren",
            "parent": {
              "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Checkbox/Checkbox.tsx",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isIndeterminate": {
            "defaultValue": null,
            "description": "Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.",
            "name": "isIndeterminate",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "CheckboxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "CheckboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the element.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the element should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "ToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "ToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
              "name": "AriaToggleProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/checkbox/src/index.d.ts",
                "name": "AriaToggleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Combobox",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the combobox.",
            "name": "startIcon",
            "parent": {
              "fileName": "../react/src/components/Combobox/Combobox.tsx",
              "name": "ComboboxProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Combobox/Combobox.tsx",
                "name": "ComboboxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "AriaComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "AriaComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultItems": {
            "defaultValue": null,
            "description": "The list of ComboBox items (uncontrolled).",
            "name": "defaultItems",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "The list of ComboBox items (controlled).",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean, menuTrigger?: MenuTriggerAction) => void"
            }
          },
          "inputValue": {
            "defaultValue": null,
            "description": "The value of the ComboBox input (controlled).",
            "name": "inputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultInputValue": {
            "defaultValue": null,
            "description": "The default value of the ComboBox input (uncontrolled).",
            "name": "defaultInputValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onInputChange": {
            "defaultValue": null,
            "description": "Handler that is called when the ComboBox input value changes.",
            "name": "onInputChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "allowsCustomValue": {
            "defaultValue": null,
            "description": "Whether the ComboBox allows a non-item matching input value to be set.",
            "name": "allowsCustomValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "menuTrigger": {
            "defaultValue": {
              "value": "'input'"
            },
            "description": "The interaction required to display the ComboBox menu.",
            "name": "menuTrigger",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "MenuTriggerAction",
              "value": [
                {
                  "value": "\"manual\""
                },
                {
                  "value": "\"input\""
                },
                {
                  "value": "\"focus\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
              "name": "ComboBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/combobox/src/index.d.ts",
                "name": "ComboBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "CssBaseline",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "DatePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
              "name": "DatePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DatePicker/DatePicker.tsx",
                "name": "DatePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: DateValue) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "DateRangePicker",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/DateRangePicker/DateRangePicker.tsx",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "minValue": {
            "defaultValue": null,
            "description": "The minimum allowed date that a user may select.",
            "name": "minValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "maxValue": {
            "defaultValue": null,
            "description": "The maximum allowed date that a user may select.",
            "name": "maxValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "isDateUnavailable": {
            "defaultValue": null,
            "description": "Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.",
            "name": "isDateUnavailable",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(date: DateValue) => boolean"
            }
          },
          "placeholderValue": {
            "defaultValue": null,
            "description": "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
            "name": "placeholderValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "DateValue"
            }
          },
          "hourCycle": {
            "defaultValue": null,
            "description": "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
            "name": "hourCycle",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "12 | 24",
              "value": [
                {
                  "value": "12"
                },
                {
                  "value": "24"
                }
              ]
            }
          },
          "granularity": {
            "defaultValue": null,
            "description": "Determines the smallest unit that is displayed in the date picker. By default, this is `\"day\"` for dates, and `\"minute\"` for times.",
            "name": "granularity",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Granularity",
              "value": [
                {
                  "value": "\"day\""
                },
                {
                  "value": "\"hour\""
                },
                {
                  "value": "\"minute\""
                },
                {
                  "value": "\"second\""
                },
                {
                  "value": "\"millisecond\""
                }
              ]
            }
          },
          "hideTimeZone": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether to hide the time zone abbreviation.",
            "name": "hideTimeZone",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DatePickerBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DatePickerBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "allowsNonContiguousRanges": {
            "defaultValue": null,
            "description": "When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.",
            "name": "allowsNonContiguousRanges",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
              "name": "DateRangePickerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/datepicker/src/index.d.ts",
                "name": "DateRangePickerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "RangeValue<DateValue>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: RangeValue<DateValue>) => void"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Dropdown",
        "methods": [],
        "props": {
          "closeOnSelect": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the dropdown closes when a selection is made.",
            "name": "closeOnSelect",
            "parent": {
              "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
              "name": "DropdownProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Dropdown/Dropdown.tsx",
                "name": "DropdownProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "DropdownMenu",
        "methods": [],
        "props": {
          "autoFocus": {
            "defaultValue": null,
            "description": "Where the focus should be set.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether keyboard navigation is circular.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onAction": {
            "defaultValue": null,
            "description": "Handler that is called when an item is selected.",
            "name": "onAction",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
              "name": "MenuProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/menu/src/index.d.ts",
                "name": "MenuProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => void"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLUListElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Flex",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the flex container.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": null,
            "description": "The aligment of the container's children.",
            "name": "align",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"baseline\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"baseline\""
                }
              ]
            }
          },
          "justify": {
            "defaultValue": null,
            "description": "The justifcation of the container's children.",
            "name": "justify",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"center\" | \"end\" | \"start\" | \"around\" | \"between\"",
              "value": [
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                },
                {
                  "value": "\"around\""
                },
                {
                  "value": "\"between\""
                }
              ]
            }
          },
          "orientation": {
            "defaultValue": null,
            "description": "The orientation of the container's children.",
            "name": "orientation",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "wrap": {
            "defaultValue": null,
            "description": "Whether the container's should wrap when overflown.",
            "name": "wrap",
            "parent": {
              "fileName": "../react/src/components/Flex/Flex.tsx",
              "name": "FlexProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Flex/Flex.tsx",
                "name": "FlexProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "FormControl",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The input within the form control.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text appended to the input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text element.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The label for the form control input element.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label element.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the form control.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
              "name": "FormControlProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/FormControl/FormControl.tsx",
                "name": "FormControlProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Icon",
        "methods": [],
        "props": {
          "icon": {
            "defaultValue": null,
            "description": "The material-icons icon name",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Icon/Icon.tsx",
              "name": "IconProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Icon/Icon.tsx",
                "name": "IconProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "IconButton",
        "methods": [],
        "props": {
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the button.",
            "name": "size",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonSize",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"dialog\" | \"tree\""
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the button.",
            "name": "children",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler called on a click event.",
            "name": "onClick",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<MouseEvent, MouseEvent>) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the button is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the button.",
            "name": "variant",
            "parent": {
              "fileName": "../react/src/components/Button/Button.tsx",
              "name": "ButtonProps"
            },
            "declarations": [
              {
                "fileName": "../react/src/components/Button/Button.tsx",
                "name": "ButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ButtonVariant",
              "value": [
                {
                  "value": "\"danger\""
                },
                {
                  "value": "\"brand\""
                },
                {
                  "value": "\"primary\""
                },
                {
                  "value": "\"secondary\""
                },
                {
                  "value": "\"tertiary\""
                }
              ]
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "type": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The behavior of the button when used in an HTML form.",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaBaseButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaBaseButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"button\" | \"reset\" | \"submit\"",
              "value": [
                {
                  "value": "\"button\""
                },
                {
                  "value": "\"reset\""
                },
                {
                  "value": "\"submit\""
                }
              ]
            }
          },
          "onPress": {
            "defaultValue": null,
            "description": "Handler that is called when the press is released over the target.",
            "name": "onPress",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressStart": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction starts.",
            "name": "onPressStart",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressEnd": {
            "defaultValue": null,
            "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.",
            "name": "onPressEnd",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onPressChange": {
            "defaultValue": null,
            "description": "Handler that is called when the press state changes.",
            "name": "onPressChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isPressed: boolean) => void"
            }
          },
          "onPressUp": {
            "defaultValue": null,
            "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.",
            "name": "onPressUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "PressEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "PressEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: PressEvent) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "A URL to link to if elementType=\"a\".",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "The target window for the link.",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "LinkButtonProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "LinkButtonProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'button'"
            },
            "description": "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
              "name": "AriaButtonElementTypeProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/button/src/index.d.ts",
                "name": "AriaButtonElementTypeProps"
              }
            ],
            "required": false,
            "type": {
              "name": "\"button\" | JSXElementConstructor<any>"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLButtonElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Link",
        "methods": [],
        "props": {
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              },
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLAnchorElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLAnchorElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLAnchorElement>"
            }
          },
          "media": {
            "defaultValue": null,
            "description": "",
            "name": "media",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "type": {
            "defaultValue": null,
            "description": "",
            "name": "type",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "href": {
            "defaultValue": null,
            "description": "",
            "name": "href",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "target": {
            "defaultValue": null,
            "description": "",
            "name": "target",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributeAnchorTarget"
            }
          },
          "rel": {
            "defaultValue": null,
            "description": "",
            "name": "rel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "download": {
            "defaultValue": null,
            "description": "",
            "name": "download",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "hrefLang": {
            "defaultValue": null,
            "description": "",
            "name": "hrefLang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "ping": {
            "defaultValue": null,
            "description": "",
            "name": "ping",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "referrerPolicy": {
            "defaultValue": null,
            "description": "",
            "name": "referrerPolicy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AnchorHTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AnchorHTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "HTMLAttributeReferrerPolicy",
              "value": [
                {
                  "value": "\"\""
                },
                {
                  "value": "\"no-referrer\""
                },
                {
                  "value": "\"no-referrer-when-downgrade\""
                },
                {
                  "value": "\"origin\""
                },
                {
                  "value": "\"origin-when-cross-origin\""
                },
                {
                  "value": "\"same-origin\""
                },
                {
                  "value": "\"strict-origin\""
                },
                {
                  "value": "\"strict-origin-when-cross-origin\""
                },
                {
                  "value": "\"unsafe-url\""
                }
              ]
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLAnchorElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "ListBox",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether to auto focus the listbox or an option.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | FocusStrategy"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "disallowEmptySelection": {
            "defaultValue": null,
            "description": "Whether the collection allows empty selection.",
            "name": "disallowEmptySelection",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(keys: Selection) => any"
            }
          },
          "shouldFocusWrap": {
            "defaultValue": null,
            "description": "Whether focus should wrap around when the end/start is reached.",
            "name": "shouldFocusWrap",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
              "name": "ListBoxProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/listbox/src/index.d.ts",
                "name": "ListBoxProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "selectionMode": {
            "defaultValue": null,
            "description": "The type of selection that is allowed in the collection.",
            "name": "selectionMode",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "SelectionMode",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"single\""
                },
                {
                  "value": "\"multiple\""
                }
              ]
            }
          },
          "selectedKeys": {
            "defaultValue": null,
            "description": "The currently selected keys in the collection (controlled).",
            "name": "selectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "defaultSelectedKeys": {
            "defaultValue": null,
            "description": "The initial selected keys in the collection (uncontrolled).",
            "name": "defaultSelectedKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "MultipleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "MultipleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "\"all\" | Iterable<Key>"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Pagination",
        "methods": [],
        "props": {
          "boundaries": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The outer visible boundaries of the pagination list.",
            "name": "boundaries",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "defaultPage": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The default page number (uncontrolled).",
            "name": "defaultPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "page": {
            "defaultValue": null,
            "description": "The current page (controlled).",
            "name": "page",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "rowsPerPage": {
            "defaultValue": {
              "value": "10"
            },
            "description": "The number of rows rendered per page.",
            "name": "rowsPerPage",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "showPageNumbers": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to show page numbers buttons.",
            "name": "showPageNumbers",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "siblings": {
            "defaultValue": {
              "value": "1"
            },
            "description": "The number of pages to display before and after the current selected page.",
            "name": "siblings",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "totalRowCount": {
            "defaultValue": null,
            "description": "The total number of rows in the table.",
            "name": "totalRowCount",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Callback executed on page change.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
              "name": "PaginationProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pagination/Pagination.tsx",
                "name": "PaginationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(page: number) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Pill",
        "methods": [],
        "props": {
          "colorScheme": {
            "defaultValue": {
              "value": "'indigo'"
            },
            "description": "The color scheme of the pill",
            "name": "colorScheme",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"indigo\" | \"red\"",
              "value": [
                {
                  "value": "\"indigo\""
                },
                {
                  "value": "\"red\""
                }
              ]
            }
          },
          "icon": {
            "defaultValue": null,
            "description": "The icon to render in the pill.",
            "name": "icon",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isCollapsible": {
            "defaultValue": {
              "value": "'false'"
            },
            "description": "Whether the pill is collapsible.",
            "name": "isCollapsible",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The text label of the pill.",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Pill/Pill.tsx",
              "name": "PillProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Pill/Pill.tsx",
                "name": "PillProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Popover",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the popover.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDismissable": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether to close the popover when the user interacts outside it.",
            "name": "isDismissable",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isKeyboardDismissDisabled": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether pressing the escape key to close the popover should be disabled.",
            "name": "isKeyboardDismissDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the popover is open.",
            "name": "isOpen",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isNonModal": {
            "defaultValue": null,
            "description": "Whether the popover should not behave as a modal.",
            "name": "isNonModal",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "shouldCloseOnBlur": {
            "defaultValue": {
              "value": "false"
            },
            "description": "Whether the popover should close when focus is lost or moves outside it.",
            "name": "shouldCloseOnBlur",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onClose": {
            "defaultValue": null,
            "description": "Handler that is called when the popover should close.",
            "name": "onClose",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "shouldCloseOnInteractOutside": {
            "defaultValue": null,
            "description": "When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref.",
            "name": "shouldCloseOnInteractOutside",
            "parent": {
              "fileName": "packages/react/src/components/Popover/Popover.tsx",
              "name": "PopoverProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Popover/Popover.tsx",
                "name": "PopoverProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(element: HTMLElement) => boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Portal",
        "methods": [],
        "props": {
          "containerRef": {
            "defaultValue": null,
            "description": "The ref of the element to append the children to.",
            "name": "containerRef",
            "parent": {
              "fileName": "packages/react/src/components/Portal/Portal.tsx",
              "name": "PortalProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Portal/Portal.tsx",
                "name": "PortalProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Provider",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "Content to be wrapped by the provider.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": true,
            "type": {
              "name": "ReactNode"
            }
          },
          "disableCSSBaseline": {
            "defaultValue": {
              "value": "false;"
            },
            "description": "Whether to disable the baseline css.",
            "name": "disableCSSBaseline",
            "parent": {
              "fileName": "packages/react/src/components/Provider/Provider.tsx",
              "name": "ProviderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Provider/Provider.tsx",
                "name": "ProviderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Radio",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Radio/Radio.tsx",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Radio/Radio.tsx",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the radio button, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": true,
            "type": {
              "name": "string"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The label for the Radio. Accepts any renderable node.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the radio button is disabled or not.\nShows that a selection exists, but is not available in that circumstance.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "RadioGroup",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The radios within the group.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "orientation": {
            "defaultValue": {
              "value": "'vertical'"
            },
            "description": "The layout orientation of the radio group.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/RadioGroup/RadioGroup.tsx",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the RadioGroup, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
              "name": "RadioGroupProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/radio/src/index.d.ts",
                "name": "RadioGroupProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "ValueBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "ValueBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "The content to display as the label.",
            "name": "label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
              "name": "LabelableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/labelable.d.ts",
                "name": "LabelableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaValidationProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaValidationProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Select",
        "methods": [],
        "props": {
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/Select/Select.tsx",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Select/Select.tsx",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactElement<any, string | JSXElementConstructor<any>>"
            }
          },
          "autoComplete": {
            "defaultValue": null,
            "description": "Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",
            "name": "autoComplete",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input, used when submitting an HTML form.",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "AriaSelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "AriaSelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Sets the open state of the menu.",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Sets the default open state of the menu.",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Method that is called when the open state of the menu changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "shouldFlip": {
            "defaultValue": {
              "value": "true"
            },
            "description": "Whether the menu should automatically flip direction when space is limited.",
            "name": "shouldFlip",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
              "name": "SelectProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/select/src/index.d.ts",
                "name": "SelectProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The contents of the collection.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": true,
            "type": {
              "name": "CollectionChildren<object>"
            }
          },
          "items": {
            "defaultValue": null,
            "description": "Item objects in the collection.",
            "name": "items",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<object>"
            }
          },
          "disabledKeys": {
            "defaultValue": null,
            "description": "The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
            "name": "disabledKeys",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "CollectionBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "CollectionBase"
              }
            ],
            "required": false,
            "type": {
              "name": "Iterable<Key>"
            }
          },
          "isLoading": {
            "defaultValue": null,
            "description": "Whether the items are currently loading.",
            "name": "isLoading",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onLoadMore": {
            "defaultValue": null,
            "description": "Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",
            "name": "onLoadMore",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
              "name": "AsyncLoadable"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/collections.d.ts",
                "name": "AsyncLoadable"
              }
            ],
            "required": false,
            "type": {
              "name": "() => any"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.",
            "name": "isRequired",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "Validation"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "Validation"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "description": {
            "defaultValue": null,
            "description": "A description for the field. Provides a hint such as specific requirements for what to choose.",
            "name": "description",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "errorMessage": {
            "defaultValue": null,
            "description": "An error message for the field.",
            "name": "errorMessage",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "HelpTextProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "HelpTextProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "TextInputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "TextInputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "selectedKey": {
            "defaultValue": null,
            "description": "The currently selected key in the collection (controlled).",
            "name": "selectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "defaultSelectedKey": {
            "defaultValue": null,
            "description": "The initial selected key in the collection (uncontrolled).",
            "name": "defaultSelectedKey",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          },
          "onSelectionChange": {
            "defaultValue": null,
            "description": "Handler that is called when the selection changes.",
            "name": "onSelectionChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
              "name": "SingleSelection"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/selection.d.ts",
                "name": "SingleSelection"
              }
            ],
            "required": false,
            "type": {
              "name": "(key: Key) => any"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Separator",
        "methods": [],
        "props": {
          "orientation": {
            "defaultValue": {
              "value": "'horizontal"
            },
            "description": "The orientation of the separator.",
            "name": "orientation",
            "parent": {
              "fileName": "packages/react/src/components/Separator/Separator.tsx",
              "name": "SeparatorProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Separator/Separator.tsx",
                "name": "SeparatorProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Switch",
        "methods": [],
        "props": {
          "chidlren": {
            "defaultValue": null,
            "description": "The label of the radio",
            "name": "chidlren",
            "parent": {
              "fileName": "packages/react/src/components/Switch/Switch.tsx",
              "name": "SwitchProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Switch/Switch.tsx",
                "name": "SwitchProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content to render as the Switch's label.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "defaultSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (uncontrolled).",
            "name": "defaultSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSelected": {
            "defaultValue": null,
            "description": "Whether the Switch should be selected (controlled).",
            "name": "isSelected",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the Switch's selection state changes.",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "(isSelected: boolean) => void"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",
            "name": "value",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "name": {
            "defaultValue": null,
            "description": "The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",
            "name": "name",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "SwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "SwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
              "name": "InputBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/inputs.d.ts",
                "name": "InputBase"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
              "name": "AriaSwitchBase"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/switch/src/index.d.ts",
                "name": "AriaSwitchBase"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "excludeFromTabOrder": {
            "defaultValue": null,
            "description": "Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.",
            "name": "excludeFromTabOrder",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "FocusableDOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "FocusableDOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that provide a detailed, extended description for the object.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
              "name": "AriaLabelingProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/dom.d.ts",
                "name": "AriaLabelingProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLLabelElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Table",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the table.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.tsx",
              "name": "TableProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.tsx",
                "name": "TableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "showHover": {
            "defaultValue": null,
            "description": "",
            "name": "showHover",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/Table/Table.context.tsx",
              "name": "TableContext"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Table/Table.context.tsx",
                "name": "TableContext"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<Element, MouseEvent>) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableBody",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the body.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
              "name": "TableBodyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableBody/TableBody.tsx",
                "name": "TableBodyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableCell",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content of the cell.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table cell.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
              "name": "TableCellProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableCell/TableCell.tsx",
                "name": "TableCellProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableDataCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableColumn",
        "methods": [],
        "props": {
          "align": {
            "defaultValue": {
              "value": "'left'"
            },
            "description": "Text alignment of the table column.",
            "name": "align",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "Align",
              "value": [
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"center\""
                },
                {
                  "value": "\"justify\""
                }
              ]
            }
          },
          "children": {
            "defaultValue": null,
            "description": "The content of the column.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isActive": {
            "defaultValue": null,
            "description": "Whether the current column is actively sorted.",
            "name": "isActive",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isSortable": {
            "defaultValue": null,
            "description": "Whether the column supports sorting.",
            "name": "isSortable",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "sortDirection": {
            "defaultValue": {
              "value": "'asc'"
            },
            "description": "The sort direction of the column.",
            "name": "sortDirection",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"desc\" | \"asc\"",
              "value": [
                {
                  "value": "\"desc\""
                },
                {
                  "value": "\"asc\""
                }
              ]
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Callback executed on column click, used for column sort only.",
            "name": "onClick",
            "parent": {
              "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
              "name": "TableColumnProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableColumn/TableColumn.tsx",
                "name": "TableColumnProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableHeaderCellElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableFooter",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the footer.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
              "name": "TableFooterProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableFooter/TableFooter.tsx",
                "name": "TableFooterProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableHeader",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The rows within the header.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
              "name": "TableHeaderProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableHeader/TableHeader.tsx",
                "name": "TableHeaderProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableSectionElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TableRow",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The cells within the row.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "Handler called on mouse enter.",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "Handler called on mouse leave.",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
              "name": "TableRowProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TableRow/TableRow.tsx",
                "name": "TableRowProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLTableRowElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Tag",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The tag label.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isRemovable": {
            "defaultValue": null,
            "description": "Whether the tag is removeable.",
            "name": "isRemovable",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onRemove": {
            "defaultValue": null,
            "description": "Handler called on tag removable.",
            "name": "onRemove",
            "parent": {
              "fileName": "packages/react/src/components/Tag/Tag.tsx",
              "name": "TagProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tag/Tag.tsx",
                "name": "TagProps"
              }
            ],
            "required": false,
            "type": {
              "name": "() => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TextArea",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
              "name": "TextAreaProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextArea/TextArea.tsx",
                "name": "TextAreaProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "TextField",
        "methods": [],
        "props": {
          "defaultValue": {
            "defaultValue": null,
            "description": "The default value (uncontrolled).",
            "name": "defaultValue",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Temporary text that occupies the text input when it is empty.",
            "name": "placeholder",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "size": {
            "defaultValue": {
              "value": "'medium'"
            },
            "description": "The size of the combobox",
            "name": "size",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"medium\" | \"small\"",
              "value": [
                {
                  "value": "\"medium\""
                },
                {
                  "value": "\"small\""
                }
              ]
            }
          },
          "value": {
            "defaultValue": null,
            "description": "The current value (controlled).",
            "name": "value",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Handler that is called when the value changes.",
            "name": "onChange",
            "parent": {
              "fileName": "packages/react/src/components/TextField/TextField.tsx",
              "name": "TextFieldProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/TextField/TextField.tsx",
                "name": "TextFieldProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(value: string) => void"
            }
          },
          "endIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the end of the text field.",
            "name": "endIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperText": {
            "defaultValue": null,
            "description": "Helper text to append to the form control input element.",
            "name": "helperText",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "helperTextProps": {
            "defaultValue": null,
            "description": "Props passed to the helper text.",
            "name": "helperTextProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "HTMLAttributes<HTMLElement>"
            }
          },
          "inputRef": {
            "defaultValue": null,
            "description": "The ref passed to the input element.",
            "name": "inputRef",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "RefObject<HTMLInputElement | HTMLTextAreaElement>"
            }
          },
          "inputProps": {
            "defaultValue": null,
            "description": "Props passed to the input element.",
            "name": "inputProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the input is disabled.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isReadOnly": {
            "defaultValue": null,
            "description": "Whether the input can be selected but not changed by the user.",
            "name": "isReadOnly",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "isRequired": {
            "defaultValue": null,
            "description": "Whether user input is required on the input before form submission.",
            "name": "isRequired",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "label": {
            "defaultValue": null,
            "description": "Label of the input element",
            "name": "label",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "labelProps": {
            "defaultValue": null,
            "description": "Props passed to the label.",
            "name": "labelProps",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "LabelHTMLAttributes<HTMLLabelElement>"
            }
          },
          "multiline": {
            "defaultValue": null,
            "description": "Whether the textfield should support multiline input (textarea).",
            "name": "multiline",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "startIcon": {
            "defaultValue": null,
            "description": "Icon displayed at the start of the text field.",
            "name": "startIcon",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "validationState": {
            "defaultValue": null,
            "description": "Whether the input should display its \"valid\" or \"invalid\" visual styling.",
            "name": "validationState",
            "parent": {
              "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
              "name": "TextFieldBaseProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/internal/TextFieldBase/TextFieldBase.tsx",
                "name": "TextFieldBaseProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "ValidationState",
              "value": [
                {
                  "value": "\"valid\""
                },
                {
                  "value": "\"invalid\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Whether the element should receive focus on render.",
            "name": "autoFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusableProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusableProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler that is called when the element receives focus.",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler that is called when the element loses focus.",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: FocusEvent<Element, Element>) => void"
            }
          },
          "onFocusChange": {
            "defaultValue": null,
            "description": "Handler that is called when the element's focus status changes.",
            "name": "onFocusChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "FocusEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "FocusEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(isFocused: boolean) => void"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "Handler that is called when a key is pressed.",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "Handler that is called when a key is released.",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
              "name": "KeyboardEvents"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/shared/src/events.d.ts",
                "name": "KeyboardEvents"
              }
            ],
            "required": false,
            "type": {
              "name": "(e: KeyboardEvent) => void"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Tooltip",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The element to attach the tooltip to.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isDisabled": {
            "defaultValue": null,
            "description": "Whether the tooltip should be disabled, independent from the trigger.",
            "name": "isDisabled",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "placement": {
            "defaultValue": {
              "value": "'top'"
            },
            "description": "The placement of the element with respect to its anchor element.",
            "name": "placement",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"bottom\" | \"left\" | \"right\" | \"top\" | \"end\" | \"start\"",
              "value": [
                {
                  "value": "\"bottom\""
                },
                {
                  "value": "\"left\""
                },
                {
                  "value": "\"right\""
                },
                {
                  "value": "\"top\""
                },
                {
                  "value": "\"end\""
                },
                {
                  "value": "\"start\""
                }
              ]
            }
          },
          "title": {
            "defaultValue": null,
            "description": "The content rendered within the tooltip.",
            "name": "title",
            "parent": {
              "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
              "name": "TooltipProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Tooltip/Tooltip.tsx",
                "name": "TooltipProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "isOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (controlled).",
            "name": "isOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultOpen": {
            "defaultValue": null,
            "description": "Whether the overlay is open by default (uncontrolled).",
            "name": "defaultOpen",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "onOpenChange": {
            "defaultValue": null,
            "description": "Handler that is called when the overlay's open state changes.",
            "name": "onOpenChange",
            "parent": {
              "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
              "name": "OverlayTriggerProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-types/overlays/src/index.d.ts",
                "name": "OverlayTriggerProps"
              }
            ],
            "required": false,
            "type": {
              "name": "(isOpen: boolean) => void"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLDivElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "Typography",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The text content of the typography component.",
            "name": "children",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "variant": {
            "defaultValue": {
              "value": "'primary'"
            },
            "description": "The display variant of the text.",
            "name": "variant",
            "parent": {
              "fileName": "packages/react/src/components/Typography/Typography.tsx",
              "name": "TypographyProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/components/Typography/Typography.tsx",
                "name": "TypographyProps"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"display\" | \"heading\" | \"title\" | \"subtitle\" | \"body\" | \"subtext\" | \"caption\" | \"bodyBold\" | \"captionBold\" | \"subtextBold\"",
              "value": [
                {
                  "value": "\"display\""
                },
                {
                  "value": "\"heading\""
                },
                {
                  "value": "\"title\""
                },
                {
                  "value": "\"subtitle\""
                },
                {
                  "value": "\"body\""
                },
                {
                  "value": "\"subtext\""
                },
                {
                  "value": "\"caption\""
                },
                {
                  "value": "\"bodyBold\""
                },
                {
                  "value": "\"captionBold\""
                },
                {
                  "value": "\"subtextBold\""
                }
              ]
            }
          },
          "id": {
            "defaultValue": null,
            "description": "The element's unique identifier",
            "name": "id",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "DOMProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "DOMProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Class name attached to the root element.",
            "name": "className",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "Theme aware style object.",
            "name": "css",
            "parent": {
              "fileName": "packages/react/src/types.ts",
              "name": "StyleProps"
            },
            "declarations": [
              {
                "fileName": "packages/react/src/types.ts",
                "name": "StyleProps"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS"
            }
          },
          "ref": {
            "defaultValue": null,
            "description": "",
            "name": "ref",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "RefAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "RefAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Ref<HTMLSpanElement>"
            }
          },
          "key": {
            "defaultValue": null,
            "description": "",
            "name": "key",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "Attributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "Attributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Key"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "VisuallyHidden hides its children visually, while keeping content visible\nto screen readers.",
        "displayName": "VisuallyHidden",
        "methods": [],
        "props": {
          "children": {
            "defaultValue": null,
            "description": "The content to visually hide.",
            "name": "children",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactNode"
            }
          },
          "elementType": {
            "defaultValue": {
              "value": "'div'"
            },
            "description": "The element type for the container.",
            "name": "elementType",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "string | JSXElementConstructor<any>"
            }
          },
          "isFocusable": {
            "defaultValue": null,
            "description": "Whether the element should become visible on focus, for example skip links.",
            "name": "isFocusable",
            "parent": {
              "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
              "name": "VisuallyHiddenProps"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@react-aria/visually-hidden/dist/types.d.ts",
                "name": "VisuallyHiddenProps"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultChecked": {
            "defaultValue": null,
            "description": "",
            "name": "defaultChecked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "",
            "name": "defaultValue",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string | number | readonly string[]"
            }
          },
          "suppressContentEditableWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressContentEditableWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "suppressHydrationWarning": {
            "defaultValue": null,
            "description": "",
            "name": "suppressHydrationWarning",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "accessKey": {
            "defaultValue": null,
            "description": "",
            "name": "accessKey",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "",
            "name": "className",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "contentEditable": {
            "defaultValue": null,
            "description": "",
            "name": "contentEditable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "\"inherit\" | Booleanish"
            }
          },
          "contextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "contextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dir": {
            "defaultValue": null,
            "description": "",
            "name": "dir",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "draggable": {
            "defaultValue": null,
            "description": "",
            "name": "draggable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "hidden": {
            "defaultValue": null,
            "description": "",
            "name": "hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "id": {
            "defaultValue": null,
            "description": "",
            "name": "id",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "lang": {
            "defaultValue": null,
            "description": "",
            "name": "lang",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "",
            "name": "placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "slot": {
            "defaultValue": null,
            "description": "",
            "name": "slot",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "spellCheck": {
            "defaultValue": null,
            "description": "",
            "name": "spellCheck",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "style": {
            "defaultValue": null,
            "description": "",
            "name": "style",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CSSProperties"
            }
          },
          "tabIndex": {
            "defaultValue": null,
            "description": "",
            "name": "tabIndex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "title": {
            "defaultValue": null,
            "description": "",
            "name": "title",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "translate": {
            "defaultValue": null,
            "description": "",
            "name": "translate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"yes\" | \"no\"",
              "value": [
                {
                  "value": "\"yes\""
                },
                {
                  "value": "\"no\""
                }
              ]
            }
          },
          "radioGroup": {
            "defaultValue": null,
            "description": "",
            "name": "radioGroup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "role": {
            "defaultValue": null,
            "description": "",
            "name": "role",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AriaRole"
            }
          },
          "about": {
            "defaultValue": null,
            "description": "",
            "name": "about",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "datatype": {
            "defaultValue": null,
            "description": "",
            "name": "datatype",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "inlist": {
            "defaultValue": null,
            "description": "",
            "name": "inlist",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "any"
            }
          },
          "prefix": {
            "defaultValue": null,
            "description": "",
            "name": "prefix",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "property": {
            "defaultValue": null,
            "description": "",
            "name": "property",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "resource": {
            "defaultValue": null,
            "description": "",
            "name": "resource",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "typeof": {
            "defaultValue": null,
            "description": "",
            "name": "typeof",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "vocab": {
            "defaultValue": null,
            "description": "",
            "name": "vocab",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCapitalize": {
            "defaultValue": null,
            "description": "",
            "name": "autoCapitalize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoCorrect": {
            "defaultValue": null,
            "description": "",
            "name": "autoCorrect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "autoSave": {
            "defaultValue": null,
            "description": "",
            "name": "autoSave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "color": {
            "defaultValue": null,
            "description": "",
            "name": "color",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemProp": {
            "defaultValue": null,
            "description": "",
            "name": "itemProp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemScope": {
            "defaultValue": null,
            "description": "",
            "name": "itemScope",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean"
            }
          },
          "itemType": {
            "defaultValue": null,
            "description": "",
            "name": "itemType",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemID": {
            "defaultValue": null,
            "description": "",
            "name": "itemID",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "itemRef": {
            "defaultValue": null,
            "description": "",
            "name": "itemRef",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "results": {
            "defaultValue": null,
            "description": "",
            "name": "results",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "security": {
            "defaultValue": null,
            "description": "",
            "name": "security",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "unselectable": {
            "defaultValue": null,
            "description": "",
            "name": "unselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"on\" | \"off\"",
              "value": [
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "inputMode": {
            "defaultValue": null,
            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
            "name": "inputMode",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
              "value": [
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"search\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"numeric\""
                },
                {
                  "value": "\"decimal\""
                }
              ]
            }
          },
          "is": {
            "defaultValue": null,
            "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
            "name": "is",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "HTMLAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "HTMLAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-activedescendant": {
            "defaultValue": null,
            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
            "name": "aria-activedescendant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-atomic": {
            "defaultValue": null,
            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
            "name": "aria-atomic",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-autocomplete": {
            "defaultValue": null,
            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
            "name": "aria-autocomplete",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"inline\" | \"none\" | \"both\" | \"list\"",
              "value": [
                {
                  "value": "\"inline\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"both\""
                },
                {
                  "value": "\"list\""
                }
              ]
            }
          },
          "aria-busy": {
            "defaultValue": null,
            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
            "name": "aria-busy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-checked": {
            "defaultValue": null,
            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
            "name": "aria-checked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-colcount": {
            "defaultValue": null,
            "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
            "name": "aria-colcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colindex": {
            "defaultValue": null,
            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
            "name": "aria-colindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-colspan": {
            "defaultValue": null,
            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
            "name": "aria-colspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-controls": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
            "name": "aria-controls",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-current": {
            "defaultValue": null,
            "description": "Indicates the element that represents the current item within a container or set of related elements.",
            "name": "aria-current",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"page\" | \"true\" | \"false\" | \"time\" | \"step\" | \"location\" | \"date\""
            }
          },
          "aria-describedby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
            "name": "aria-describedby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-details": {
            "defaultValue": null,
            "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
            "name": "aria-details",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-disabled": {
            "defaultValue": null,
            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
            "name": "aria-disabled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-dropeffect": {
            "defaultValue": null,
            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
            "name": "aria-dropeffect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"link\" | \"none\" | \"copy\" | \"move\" | \"execute\" | \"popup\"",
              "value": [
                {
                  "value": "\"link\""
                },
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"copy\""
                },
                {
                  "value": "\"move\""
                },
                {
                  "value": "\"execute\""
                },
                {
                  "value": "\"popup\""
                }
              ]
            }
          },
          "aria-errormessage": {
            "defaultValue": null,
            "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
            "name": "aria-errormessage",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-expanded": {
            "defaultValue": null,
            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
            "name": "aria-expanded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-flowto": {
            "defaultValue": null,
            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
            "name": "aria-flowto",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-grabbed": {
            "defaultValue": null,
            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
            "name": "aria-grabbed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-haspopup": {
            "defaultValue": null,
            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
            "name": "aria-haspopup",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"grid\" | \"listbox\" | \"menu\" | \"true\" | \"false\" | \"dialog\" | \"tree\""
            }
          },
          "aria-hidden": {
            "defaultValue": null,
            "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
            "name": "aria-hidden",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-invalid": {
            "defaultValue": null,
            "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
            "name": "aria-invalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
            }
          },
          "aria-keyshortcuts": {
            "defaultValue": null,
            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
            "name": "aria-keyshortcuts",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-label": {
            "defaultValue": null,
            "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
            "name": "aria-label",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-labelledby": {
            "defaultValue": null,
            "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
            "name": "aria-labelledby",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-level": {
            "defaultValue": null,
            "description": "Defines the hierarchical level of an element within a structure.",
            "name": "aria-level",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-live": {
            "defaultValue": null,
            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
            "name": "aria-live",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"off\" | \"assertive\" | \"polite\"",
              "value": [
                {
                  "value": "\"off\""
                },
                {
                  "value": "\"assertive\""
                },
                {
                  "value": "\"polite\""
                }
              ]
            }
          },
          "aria-modal": {
            "defaultValue": null,
            "description": "Indicates whether an element is modal when displayed.",
            "name": "aria-modal",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiline": {
            "defaultValue": null,
            "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
            "name": "aria-multiline",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-multiselectable": {
            "defaultValue": null,
            "description": "Indicates that the user may select more than one item from the current selectable descendants.",
            "name": "aria-multiselectable",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-orientation": {
            "defaultValue": null,
            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
            "name": "aria-orientation",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"horizontal\" | \"vertical\"",
              "value": [
                {
                  "value": "\"horizontal\""
                },
                {
                  "value": "\"vertical\""
                }
              ]
            }
          },
          "aria-owns": {
            "defaultValue": null,
            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
            "name": "aria-owns",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-placeholder": {
            "defaultValue": null,
            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
            "name": "aria-placeholder",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-posinset": {
            "defaultValue": null,
            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
            "name": "aria-posinset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-pressed": {
            "defaultValue": null,
            "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
            "name": "aria-pressed",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "boolean | \"mixed\" | \"true\" | \"false\""
            }
          },
          "aria-readonly": {
            "defaultValue": null,
            "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
            "name": "aria-readonly",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-relevant": {
            "defaultValue": null,
            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
            "name": "aria-relevant",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
              "value": [
                {
                  "value": "\"all\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"additions\""
                },
                {
                  "value": "\"additions removals\""
                },
                {
                  "value": "\"additions text\""
                },
                {
                  "value": "\"removals\""
                },
                {
                  "value": "\"removals additions\""
                },
                {
                  "value": "\"removals text\""
                },
                {
                  "value": "\"text additions\""
                },
                {
                  "value": "\"text removals\""
                }
              ]
            }
          },
          "aria-required": {
            "defaultValue": null,
            "description": "Indicates that user input is required on the element before a form may be submitted.",
            "name": "aria-required",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-roledescription": {
            "defaultValue": null,
            "description": "Defines a human-readable, author-localized description for the role of an element.",
            "name": "aria-roledescription",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "aria-rowcount": {
            "defaultValue": null,
            "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
            "name": "aria-rowcount",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowindex": {
            "defaultValue": null,
            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
            "name": "aria-rowindex",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-rowspan": {
            "defaultValue": null,
            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
            "name": "aria-rowspan",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-selected": {
            "defaultValue": null,
            "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
            "name": "aria-selected",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "Booleanish"
            }
          },
          "aria-setsize": {
            "defaultValue": null,
            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
            "name": "aria-setsize",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-sort": {
            "defaultValue": null,
            "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
            "name": "aria-sort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "enum",
              "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
              "value": [
                {
                  "value": "\"none\""
                },
                {
                  "value": "\"ascending\""
                },
                {
                  "value": "\"descending\""
                },
                {
                  "value": "\"other\""
                }
              ]
            }
          },
          "aria-valuemax": {
            "defaultValue": null,
            "description": "Defines the maximum allowed value for a range widget.",
            "name": "aria-valuemax",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuemin": {
            "defaultValue": null,
            "description": "Defines the minimum allowed value for a range widget.",
            "name": "aria-valuemin",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuenow": {
            "defaultValue": null,
            "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
            "name": "aria-valuenow",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "number"
            }
          },
          "aria-valuetext": {
            "defaultValue": null,
            "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
            "name": "aria-valuetext",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "AriaAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "AriaAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "string"
            }
          },
          "dangerouslySetInnerHTML": {
            "defaultValue": null,
            "description": "",
            "name": "dangerouslySetInnerHTML",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "{ __html: string; }"
            }
          },
          "onCopy": {
            "defaultValue": null,
            "description": "",
            "name": "onCopy",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCopyCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCopyCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCut": {
            "defaultValue": null,
            "description": "",
            "name": "onCut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "",
            "name": "onPaste",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onPasteCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPasteCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ClipboardEventHandler<HTMLElement>"
            }
          },
          "onCompositionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStart": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onCompositionUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCompositionUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "CompositionEventHandler<HTMLElement>"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "",
            "name": "onFocus",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onFocusCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onFocusCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "",
            "name": "onBlur",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onBlurCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBlurCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FocusEventHandler<HTMLElement>"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "",
            "name": "onChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInput": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onBeforeInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onBeforeInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInput": {
            "defaultValue": null,
            "description": "",
            "name": "onInput",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInputCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInputCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onReset": {
            "defaultValue": null,
            "description": "",
            "name": "onReset",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onResetCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onResetCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmit": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onSubmitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSubmitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalid": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalid",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onInvalidCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onInvalidCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "FormEventHandler<HTMLElement>"
            }
          },
          "onLoad": {
            "defaultValue": null,
            "description": "",
            "name": "onLoad",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onError": {
            "defaultValue": null,
            "description": "",
            "name": "onError",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onErrorCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onErrorCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onKeyDown": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPress": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyPressCapture": {
            "defaultValue": null,
            "description": "@deprecated",
            "name": "onKeyPressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUp": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onKeyUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onKeyUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "KeyboardEventHandler<HTMLElement>"
            }
          },
          "onAbort": {
            "defaultValue": null,
            "description": "",
            "name": "onAbort",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAbortCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAbortCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThrough": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThrough",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onCanPlayThroughCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onCanPlayThroughCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChange": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onDurationChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDurationChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptied": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptied",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEmptiedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEmptiedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncrypted": {
            "defaultValue": null,
            "description": "",
            "name": "onEncrypted",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEncryptedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEncryptedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEnded": {
            "defaultValue": null,
            "description": "",
            "name": "onEnded",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onEndedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onEndedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedData": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedData",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedDataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedDataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadata": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadata",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadedMetadataCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadedMetadataCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStart": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onLoadStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLoadStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPause": {
            "defaultValue": null,
            "description": "",
            "name": "onPause",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPauseCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPauseCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlay": {
            "defaultValue": null,
            "description": "",
            "name": "onPlay",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlaying": {
            "defaultValue": null,
            "description": "",
            "name": "onPlaying",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onPlayingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPlayingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgress": {
            "defaultValue": null,
            "description": "",
            "name": "onProgress",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onProgressCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onProgressCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChange": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onRateChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onRateChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeked": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeked",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekedCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekedCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeeking": {
            "defaultValue": null,
            "description": "",
            "name": "onSeeking",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSeekingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSeekingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalled": {
            "defaultValue": null,
            "description": "",
            "name": "onStalled",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onStalledCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onStalledCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspend": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspend",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSuspendCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSuspendCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdate": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdate",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTimeUpdateCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTimeUpdateCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChange": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChange",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onVolumeChangeCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onVolumeChangeCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaiting": {
            "defaultValue": null,
            "description": "",
            "name": "onWaiting",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onWaitingCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWaitingCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onAuxClick": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onAuxClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAuxClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "",
            "name": "onClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenu": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenu",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onContextMenuCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onContextMenuCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClick": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClick",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDoubleClickCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDoubleClickCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onDrag": {
            "defaultValue": null,
            "description": "",
            "name": "onDrag",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExit": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExit",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragExitCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragExitCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOver": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStart": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDragStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDragStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDrop": {
            "defaultValue": null,
            "description": "",
            "name": "onDrop",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onDropCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onDropCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "DragEventHandler<HTMLElement>"
            }
          },
          "onMouseDown": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMove": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOut": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOver": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUp": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onMouseUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onMouseUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "MouseEventHandler<HTMLElement>"
            }
          },
          "onSelect": {
            "defaultValue": null,
            "description": "",
            "name": "onSelect",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onSelectCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onSelectCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "ReactEventHandler<HTMLElement>"
            }
          },
          "onTouchCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMove": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStart": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onTouchStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTouchStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TouchEventHandler<HTMLElement>"
            }
          },
          "onPointerDown": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDown",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerDownCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerDownCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMove": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMove",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerMoveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerMoveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUp": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUp",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerUpCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerUpCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancel": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerCancelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerCancelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnter": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnter",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerEnterCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerEnterCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeave": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeave",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerLeaveCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerLeaveCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOver": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOver",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOverCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOverCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOut": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOut",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onPointerOutCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onPointerOutCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onGotPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onGotPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onLostPointerCaptureCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onLostPointerCaptureCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "PointerEventHandler<HTMLElement>"
            }
          },
          "onScroll": {
            "defaultValue": null,
            "description": "",
            "name": "onScroll",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onScrollCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onScrollCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "UIEventHandler<HTMLElement>"
            }
          },
          "onWheel": {
            "defaultValue": null,
            "description": "",
            "name": "onWheel",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onWheelCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onWheelCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "WheelEventHandler<HTMLElement>"
            }
          },
          "onAnimationStart": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStart",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationStartCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationStartCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIteration": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIteration",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onAnimationIterationCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onAnimationIterationCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "AnimationEventHandler<HTMLElement>"
            }
          },
          "onTransitionEnd": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEnd",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          },
          "onTransitionEndCapture": {
            "defaultValue": null,
            "description": "",
            "name": "onTransitionEndCapture",
            "parent": {
              "fileName": "manifest/node_modules/@types/react/index.d.ts",
              "name": "DOMAttributes"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/@types/react/index.d.ts",
                "name": "DOMAttributes"
              }
            ],
            "required": false,
            "type": {
              "name": "TransitionEventHandler<HTMLElement>"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "pxToRem",
        "methods": [],
        "props": {
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "(radix?: number) => string"
            }
          },
          "toFixed": {
            "defaultValue": null,
            "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
            "name": "toFixed",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(fractionDigits?: number) => string"
            }
          },
          "toExponential": {
            "defaultValue": null,
            "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
            "name": "toExponential",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(fractionDigits?: number) => string"
            }
          },
          "toPrecision": {
            "defaultValue": null,
            "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
            "name": "toPrecision",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(precision?: number) => string"
            }
          },
          "valueOf": {
            "defaultValue": {},
            "description": "Returns the primitive value of the specified object.",
            "name": "valueOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "() => number"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.\n@param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2020.number.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "globalCss",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>[]): ({ ...; } & { [K in..."
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, b: { ...; } & { [K in keyof Sty..."
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]; (st..."
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ......"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ....."
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({..."
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (this: void, value: { ....."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, obj: ({ ...; ..."
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, start?: number, end?: number) => ({ ...;..."
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }..."
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>;..."
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "keyframes",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "css",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>[]): (string | ... 3 more ... | { ...; })[]; (...items: (string | ... 4 more ... | ConcatArray<...>)[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, b: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }) => number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]; (start: number, deleteCount: number, ...items: (string | ... 3 more ... | { ...; })[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): this is ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => boolean"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => void, thisArg?: any) => void"
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U, thisArg?: any) => U[]"
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): S[]; (pr..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (this: void, value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any)..."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => number"
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, start?: number, end?: number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { ...; })[]"
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U | readonly U[], thisArg?: This) => U[]"
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "focus",
        "methods": [],
        "props": {
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "../react/src/index.ts",
        "description": "",
        "displayName": "focusWithin",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/config.ts",
        "description": "",
        "displayName": "globalCss",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>[]): ({ ...; } & { [K in..."
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, b: { ...; } & { [K in keyof Sty..."
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]; (st..."
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ......"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ....."
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({..."
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (this: void, value: { ....."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, obj: ({ ...; ..."
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, start?: number, end?: number) => ({ ...;..."
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }..."
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>;..."
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/config.ts",
        "description": "",
        "displayName": "keyframes",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/config.ts",
        "description": "",
        "displayName": "css",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>[]): (string | ... 3 more ... | { ...; })[]; (...items: (string | ... 4 more ... | ConcatArray<...>)[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, b: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }) => number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]; (start: number, deleteCount: number, ...items: (string | ... 3 more ... | { ...; })[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): this is ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => boolean"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => void, thisArg?: any) => void"
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U, thisArg?: any) => U[]"
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): S[]; (pr..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (this: void, value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any)..."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => number"
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, start?: number, end?: number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { ...; })[]"
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U | readonly U[], thisArg?: This) => U[]"
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "pxToRem",
        "methods": [],
        "props": {
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "(radix?: number) => string"
            }
          },
          "toFixed": {
            "defaultValue": null,
            "description": "Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
            "name": "toFixed",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(fractionDigits?: number) => string"
            }
          },
          "toExponential": {
            "defaultValue": null,
            "description": "Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
            "name": "toExponential",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(fractionDigits?: number) => string"
            }
          },
          "toPrecision": {
            "defaultValue": null,
            "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",
            "name": "toPrecision",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": true,
            "type": {
              "name": "(precision?: number) => string"
            }
          },
          "valueOf": {
            "defaultValue": {},
            "description": "Returns the primitive value of the specified object.",
            "name": "valueOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "() => number"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.\n@param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Number"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Number"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2020.number.d.ts",
                "name": "Number"
              }
            ],
            "required": false,
            "type": {
              "name": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "globalCss",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>[]): ({ ...; } & { [K in..."
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, b: { ...; } & { [K in keyof Sty..."
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]; (st..."
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ......"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({ ....."
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, array: ({..."
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (value: { ...; } & { [K ..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, currentValue: { ...."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>(predicate: (this: void, value: { ....."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, index: number, obj: ({ ...; ..."
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, start?: number, end?: number) => ({ ...;..."
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => ({ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }..."
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>;..."
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => { '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<{ '@import'?: unknown; '@font-face'?: unknown; } & { [K in keyof Styles]: K extends \"@import\" ? string | string[] : K extends \"@font-face\" ? FontFace | FontFace[] : K extends `@keyframes ${string}` ? { ...; } : K extends `@property ${string}` ? Property : CSS<...>; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "keyframes",
        "methods": [],
        "props": {}
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "css",
        "methods": [],
        "props": {
          "length": {
            "defaultValue": null,
            "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "name": "length",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "number"
            }
          },
          "toString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array.",
            "name": "toString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "toLocaleString": {
            "defaultValue": {},
            "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
            "name": "toLocaleString",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": false,
            "type": {
              "name": "() => string"
            }
          },
          "pop": {
            "defaultValue": null,
            "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "pop",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "push": {
            "defaultValue": null,
            "description": "Appends new elements to the end of an array, and returns the new length of the array.\n@param items New elements to add to the array.",
            "name": "push",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "concat": {
            "defaultValue": null,
            "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.\n@param items Additional arrays and/or items to add to the end of the array.\n@param items Additional arrays and/or items to add to the end of the array.",
            "name": "concat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (...items: ConcatArray<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>[]): (string | ... 3 more ... | { ...; })[]; (...items: (string | ... 4 more ... | ConcatArray<...>)[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "join": {
            "defaultValue": null,
            "description": "Adds all the elements of an array into a string, separated by the specified separator string.\n@param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.",
            "name": "join",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(separator?: string) => string"
            }
          },
          "reverse": {
            "defaultValue": null,
            "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
            "name": "reverse",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "shift": {
            "defaultValue": null,
            "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
            "name": "shift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "slice": {
            "defaultValue": null,
            "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.\n@param start The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.\n@param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.",
            "name": "slice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(start?: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]"
            }
          },
          "sort": {
            "defaultValue": null,
            "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```",
            "name": "sort",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(compareFn?: (a: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, b: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }) => number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "splice": {
            "defaultValue": null,
            "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@returns An array containing the elements that were deleted.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.\n@returns An array containing the elements that were deleted.",
            "name": "splice",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (start: number, deleteCount?: number): (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]; (start: number, deleteCount: number, ...items: (string | ... 3 more ... | { ...; })[]): (string | ... 3 more ... | { ...; })[]; }"
            }
          },
          "unshift": {
            "defaultValue": null,
            "description": "Inserts new elements at the start of an array, and returns the new length of the array.\n@param items Elements to insert at the start of the array.",
            "name": "unshift",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(...items: (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; })[]) => number"
            }
          },
          "indexOf": {
            "defaultValue": null,
            "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
            "name": "indexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "lastIndexOf": {
            "defaultValue": null,
            "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.",
            "name": "lastIndexOf",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => number"
            }
          },
          "every": {
            "defaultValue": null,
            "description": "Determines whether all the members of an array satisfy the specified test.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "every",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): this is ..."
            }
          },
          "some": {
            "defaultValue": null,
            "description": "Determines whether the specified callback function returns true for any element of an array.\n@param predicate A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.",
            "name": "some",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => boolean"
            }
          },
          "forEach": {
            "defaultValue": null,
            "description": "Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "forEach",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => void, thisArg?: any) => void"
            }
          },
          "map": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",
            "name": "map",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U>(callbackfn: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U, thisArg?: any) => U[]"
            }
          },
          "filter": {
            "defaultValue": null,
            "description": "Returns the elements of an array that meet the condition specified in a callback function.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n@param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.",
            "name": "filter",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any): S[]; (pr..."
            }
          },
          "reduce": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduce",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "reduceRight": {
            "defaultValue": null,
            "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
            "name": "reduceRight",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es5.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ (callbackfn: (previousValue: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, currentValue: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, currentIndex: number, array: (string | ... 3 more ... | { ...; })[]) => string | ... 3 m..."
            }
          },
          "find": {
            "defaultValue": null,
            "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "find",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              },
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "{ <S extends string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>(predicate: (this: void, value: string | Function | ExoticComponent<...> | JSXElementConstructor<...> | { ...; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => value is S, thisArg?: any)..."
            }
          },
          "findIndex": {
            "defaultValue": null,
            "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.",
            "name": "findIndex",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(predicate: (value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, obj: (string | ... 3 more ... | { ...; })[]) => unknown, thisArg?: any) => number"
            }
          },
          "fill": {
            "defaultValue": null,
            "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\nlength+end.",
            "name": "fill",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, start?: number, end?: number) => (string | ... 3 more ... | { ...; })[]"
            }
          },
          "copyWithin": {
            "defaultValue": null,
            "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\nlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",
            "name": "copyWithin",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.core.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(target: number, start: number, end?: number) => (string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { ...; })[]"
            }
          },
          "entries": {
            "defaultValue": null,
            "description": "Returns an iterable of key, value pairs for every entry in the array",
            "name": "entries",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<[number, string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }]>"
            }
          },
          "keys": {
            "defaultValue": null,
            "description": "Returns an iterable of keys in the array",
            "name": "keys",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<number>"
            }
          },
          "values": {
            "defaultValue": null,
            "description": "Returns an iterable of values in the array",
            "name": "values",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "includes": {
            "defaultValue": null,
            "description": "Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",
            "name": "includes",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(searchElement: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, fromIndex?: number) => boolean"
            }
          },
          "flatMap": {
            "defaultValue": null,
            "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.\n@param callback A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value.",
            "name": "flatMap",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<U, This = undefined>(callback: (this: This, value: string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }, index: number, array: (string | ... 3 more ... | { ...; })[]) => U | readonly U[], thisArg?: This) => U[]"
            }
          },
          "flat": {
            "defaultValue": null,
            "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.\n@param depth The maximum recursion depth",
            "name": "flat",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2019.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
            }
          },
          "at": {
            "defaultValue": null,
            "description": "Returns the item located at the specified index.\n@param index The zero-based index of the desired code unit. A negative index will count back from the last item.",
            "name": "at",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2022.array.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "(index: number) => string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }"
            }
          },
          "__@iterator@242": {
            "defaultValue": null,
            "description": "Iterator",
            "name": "__@iterator@242",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => IterableIterator<string | Function | ExoticComponent<any> | JSXElementConstructor<any> | { [name: string]: unknown; }>"
            }
          },
          "__@unscopables@244": {
            "defaultValue": null,
            "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
            "name": "__@unscopables@244",
            "parent": {
              "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
              "name": "Array"
            },
            "declarations": [
              {
                "fileName": "manifest/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                "name": "Array"
              }
            ],
            "required": true,
            "type": {
              "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "focus",
        "methods": [],
        "props": {
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/index.ts",
        "description": "",
        "displayName": "focusWithin",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/shared/focus.ts",
        "description": "",
        "displayName": "focus",
        "methods": [],
        "props": {
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/shared/focus.ts",
        "description": "",
        "displayName": "focusWithin",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/shared/index.ts",
        "description": "",
        "displayName": "focus",
        "methods": [],
        "props": {
          "isFocusVisible": {
            "defaultValue": null,
            "description": "",
            "name": "isFocusVisible",
            "declarations": [],
            "required": false,
            "type": {
              "name": "boolean | \"true\" | \"false\" | ({ \"@lg\"?: boolean | \"true\" | \"false\"; \"@md\"?: boolean | \"true\" | \"false\"; \"@sm\"?: boolean | \"true\" | \"false\"; \"@xl\"?: boolean | \"true\" | \"false\"; \"@initial\"?: boolean | \"true\" | \"false\"; } & { ...; })"
            }
          },
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      },
      {
        "tags": {},
        "filePath": "/Users/brandonclark/Development/manifest/packages/react/src/styles/shared/index.ts",
        "description": "",
        "displayName": "focusWithin",
        "methods": [],
        "props": {
          "css": {
            "defaultValue": null,
            "description": "",
            "name": "css",
            "declarations": [
              {
                "fileName": "manifest/node_modules/@stitches/react/types/styled-component.d.ts",
                "name": "TypeLiteral"
              }
            ],
            "required": false,
            "type": {
              "name": "CSS<{ lg: string; md: string; sm: string; xl: string; }, { borderWidths: { large: string; medium: string; small: string; }; colors: { 'background-danger': string; 'background-primary': string; 'background-secondary': string; ... 147 more ...; 'data-viz-warning-line': string; }; ... 10 more ...; zIndices: { ...; }; }..."
            }
          }
        }
      }
    ]
  },
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}