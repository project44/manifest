export interface PropDoc {
  description: string;
  defaultValue: any;
  name: string;
  required: boolean;
  type: string;
}

export interface ComponentDoc {
  displayName: string;
  props: PropDoc[];
}

export const props: ComponentDoc[] = [
  {
    displayName: 'Box',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'Avatar',
    props: [
      {
        defaultValue: '',
        description: 'The alt text passed to the image.',
        name: 'alt',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Name used as a fallback if src is not provided or image cannot be found.',
        name: 'fallback',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the avatar.',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description: 'The `src` attribute for the `img` element.',
        name: 'src',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'Button',
    props: [
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.',
        name: 'aria-expanded',
        required: false,
        type: 'boolean | "true" | "false" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.',
        name: 'aria-haspopup',
        required: false,
        type: 'boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Indicates the current "pressed" state of toggle buttons.',
        name: 'aria-pressed',
        required: false,
        type: 'boolean | "true" | "false" | "mixed" ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The content to display in the button.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: "'button'",
        description:
          "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
        name: 'elementType',
        required: false,
        type: '"button" | JSXElementConstructor<any> ',
      },
      {
        defaultValue: '',
        description: 'Icon added after the button text.',
        name: 'endIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'A URL to link to if elementType="a".',
        name: 'href',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the button is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler called on a click event.',
        name: 'onClick',
        required: false,
        type: '((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press is released over the target.',
        name: 'onPress',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press state changes.',
        name: 'onPressChange',
        required: false,
        type: '((isPressed: boolean) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.',
        name: 'onPressEnd',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a press interaction starts.',
        name: 'onPressStart',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.',
        name: 'onPressUp',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).',
        name: 'rel',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the button.',
        name: 'size',
        required: false,
        type: 'ButtonSize ',
      },
      {
        defaultValue: '',
        description: 'Icon added before the button text.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'The target window for the link.',
        name: 'target',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'button'",
        description: 'The behavior of the button when used in an HTML form.',
        name: 'type',
        required: false,
        type: '"button" | "submit" | "reset" ',
      },
      {
        defaultValue: "'primary'",
        description: 'The display variant of the button.',
        name: 'variant',
        required: false,
        type: 'ButtonVariant ',
      },
    ],
  },
  {
    displayName: 'ButtonGroup',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the buttons in the button are attached.',
        name: 'isAttached',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the buttons in the button group are all disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the buttons in the group.',
        name: 'size',
        required: false,
        type: 'ButtonSize ',
      },
      {
        defaultValue: "'primary'",
        description: 'The group variant',
        name: 'variant',
        required: false,
        type: 'ButtonVariant ',
      },
    ],
  },
  {
    displayName: 'Calendar',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: 'false',
        description: 'Whether to automatically focus the calendar when it mounts.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The date that is focused when the calendar first mounts (uncountrolled).',
        name: 'defaultFocusedValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'An error message to display when the selected value is invalid.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Controls the currently focused date within the calendar.',
        name: 'focusedValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description:
          'Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.',
        name: 'isDateUnavailable',
        required: false,
        type: '((date: DateValue) => boolean) ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the calendar is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the calendar value is immutable.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The maximum allowed date that a user may select.',
        name: 'maxValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The minimum allowed date that a user may select.',
        name: 'minValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: DateValue) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the focused date changes.',
        name: 'onFocusChange',
        required: false,
        type: '((date: CalendarDate) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Whether the current selection is valid or invalid according to application logic.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'DateValue ',
      },
    ],
  },
  {
    displayName: 'CalendarHeader',
    props: [
      {
        defaultValue: '',
        description: 'Props passed to the next button',
        name: 'nextButtonProps',
        required: true,
        type: 'AriaButtonProps<"button">',
      },
      {
        defaultValue: '',
        description: 'Props passed to the previous button.',
        name: 'prevButtonProps',
        required: true,
        type: 'AriaButtonProps<"button">',
      },
      {
        defaultValue: '',
        description: 'The calendar state.',
        name: 'state',
        required: true,
        type: 'CalendarState | RangeCalendarState',
      },
    ],
  },
  {
    displayName: 'CalendarCell',
    props: [
      {
        defaultValue: '',
        description: 'The current month to helpe determine out of range dates.',
        name: 'currentMonth',
        required: true,
        type: 'CalendarDate',
      },
      {
        defaultValue: '',
        description: 'The date that this cell represents.',
        name: 'date',
        required: true,
        type: 'CalendarDate',
      },
      {
        defaultValue: '',
        description: 'The calendar state.',
        name: 'state',
        required: true,
        type: 'CalendarState | RangeCalendarState',
      },
    ],
  },
  {
    displayName: 'CalendarRange',
    props: [
      {
        defaultValue: '',
        description:
          'When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.',
        name: 'allowsNonContiguousRanges',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: 'false',
        description: 'Whether to automatically focus the calendar when it mounts.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The date that is focused when the calendar first mounts (uncountrolled).',
        name: 'defaultFocusedValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'RangeValue<DateValue> ',
      },
      {
        defaultValue: '',
        description: 'An error message to display when the selected value is invalid.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Controls the currently focused date within the calendar.',
        name: 'focusedValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description:
          'Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.',
        name: 'isDateUnavailable',
        required: false,
        type: '((date: DateValue) => boolean) ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the calendar is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the calendar value is immutable.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The maximum allowed date that a user may select.',
        name: 'maxValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The minimum allowed date that a user may select.',
        name: 'minValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: RangeValue<DateValue>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the focused date changes.',
        name: 'onFocusChange',
        required: false,
        type: '((date: CalendarDate) => void) ',
      },
      {
        defaultValue: '',
        description: 'Brings the list of ranges defined to the component',
        name: 'ranges',
        required: false,
        type: 'DefinedRange[] ',
      },
      {
        defaultValue: 'true',
        description:
          'Allows to show or hide the calendar of the component\n@example <DateRangePicker showCalendar={false} />',
        name: 'showCalendar',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description:
          'Allows to pass or avoid the ranges to the component\n@example <DateRangePicker showRanges={false} />',
        name: 'showRanges',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether the current selection is valid or invalid according to application logic.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'RangeValue<DateValue> ',
      },
    ],
  },
  {
    displayName: 'CalendarRanges',
    props: [
      {
        defaultValue: '',
        description: 'function to hable the change on Ranges',
        name: 'onRangeChange',
        required: false,
        type: '((key: Selection, ranges: DefinedRange[]) => void) ',
      },
      {
        defaultValue: '',
        description: 'The ranges provided',
        name: 'ranges',
        required: false,
        type: 'DefinedRange[] ',
      },
    ],
  },
  {
    displayName: 'CalendarTable',
    props: [
      {
        defaultValue: '',
        description: 'The calendar state.',
        name: 'state',
        required: true,
        type: 'CalendarState | RangeCalendarState',
      },
    ],
  },
  {
    displayName: 'Card',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'CardFooter',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'CardHeader',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'CardBody',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'Checkbox',
    props: [
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element that provides an error message for the object.',
        name: 'aria-errormessage',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The label for the element.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should be selected (uncontrolled).',
        name: 'defaultSelected',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.',
        name: 'isIndeterminate',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should be selected (controlled).',
        name: 'isSelected',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).',
        name: 'name',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's selection state changes.",
        name: 'onChange',
        required: false,
        type: '((isSelected: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description:
          'The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).',
        name: 'value',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'Combobox',
    props: [
      {
        defaultValue: '',
        description: 'Whether the ComboBox allows a non-item matching input value to be set.',
        name: 'allowsCustomValue',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The contents of the collection.',
        name: 'children',
        required: true,
        type: 'CollectionChildren<object>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The default value of the ComboBox input (uncontrolled).',
        name: 'defaultInputValue',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The list of ComboBox items (uncontrolled).',
        name: 'defaultItems',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'The initial selected key in the collection (uncontrolled).',
        name: 'defaultSelectedKey',
        required: false,
        type: 'Key ',
      },
      {
        defaultValue: '',
        description:
          'A description for the field. Provides a hint such as specific requirements for what to choose.',
        name: 'description',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.',
        name: 'disabledKeys',
        required: false,
        type: 'Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'An error message for the field.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The value of the ComboBox input (controlled).',
        name: 'inputValue',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The list of ComboBox items (controlled).',
        name: 'items',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description:
          'The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height.',
        name: 'maxHeight',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: "'input'",
        description: 'The interaction required to display the ComboBox menu.',
        name: 'menuTrigger',
        required: false,
        type: 'MenuTriggerAction ',
      },
      {
        defaultValue: '',
        description:
          'The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).',
        name: 'name',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '4',
        description:
          'The additional offset applied along the main axis between the element and its\nanchor element.',
        name: 'offset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the ComboBox input value changes.',
        name: 'onInputChange',
        required: false,
        type: '((value: string) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.',
        name: 'onOpenChange',
        required: false,
        type: '((isOpen: boolean, menuTrigger?: MenuTriggerAction ) => void) | undefined',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the selection changes.',
        name: 'onSelectionChange',
        required: false,
        type: '((key: Key) => any) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'bottom'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: 'Placement ',
      },
      {
        defaultValue: '',
        description: 'The currently selected key in the collection (controlled).',
        name: 'selectedKey',
        required: false,
        type: 'Key | null ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.',
        name: 'shouldFlip',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether keyboard navigation is circular.',
        name: 'shouldFocusWrap',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the combobox',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description: 'Icon displayed at the start of the combobox.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
    ],
  },
  {
    displayName: 'ComboboxItem',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: '"div" ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Icon added before the item text.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
    ],
  },
  {
    displayName: 'ComboboxSection',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: '"div" ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The section label.',
        name: 'title',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Container',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the container should adjust its max-width based on the current screen size.',
        name: 'fixed',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'large'",
        description: 'The max-width of the container.',
        name: 'maxWidth',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
    ],
  },
  {
    displayName: 'DatePicker',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (uncontrolled).',
        name: 'defaultOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description:
          'A description for the field. Provides a hint such as specific requirements for what to choose.',
        name: 'description',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'An error message for the field.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'Determines the smallest unit that is displayed in the date picker. By default, this is `"day"` for dates, and `"minute"` for times.',
        name: 'granularity',
        required: false,
        type: 'Granularity ',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: 'false',
        description: 'Whether to hide the time zone abbreviation.',
        name: 'hideTimeZone',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
        name: 'hourCycle',
        required: false,
        type: '12 | 24 ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.',
        name: 'isDateUnavailable',
        required: false,
        type: '((date: DateValue) => boolean) ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (controlled).',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'The maximum allowed date that a user may select.',
        name: 'maxValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The minimum allowed date that a user may select.',
        name: 'minValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '4',
        description:
          'The additional offset applied along the main axis between the element and its\nanchor element.',
        name: 'offset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: DateValue) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the overlay's open state changes.",
        name: 'onOpenChange',
        required: false,
        type: '((isOpen: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
        name: 'placeholderValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: "'bottom'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: 'Placement ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.',
        name: 'shouldFlip',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the combobox',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description:
          'Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'DateValue ',
      },
    ],
  },
  {
    displayName: 'DateRangePicker',
    props: [
      {
        defaultValue: '',
        description:
          'When combined with `isDateUnavailable`, determines whether non-contiguous ranges,\ni.e. ranges containing unavailable dates, may be selected.',
        name: 'allowsNonContiguousRanges',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (uncontrolled).',
        name: 'defaultOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'RangeValue<DateValue> ',
      },
      {
        defaultValue: '',
        description:
          'A description for the field. Provides a hint such as specific requirements for what to choose.',
        name: 'description',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'An error message for the field.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'Determines the smallest unit that is displayed in the date picker. By default, this is `"day"` for dates, and `"minute"` for times.',
        name: 'granularity',
        required: false,
        type: 'Granularity ',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: 'false',
        description: 'Whether to hide the time zone abbreviation.',
        name: 'hideTimeZone',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.",
        name: 'hourCycle',
        required: false,
        type: '12 | 24 ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.',
        name: 'isDateUnavailable',
        required: false,
        type: '((date: DateValue) => boolean) ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (controlled).',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'The maximum allowed date that a user may select.',
        name: 'maxValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '',
        description: 'The minimum allowed date that a user may select.',
        name: 'minValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: '4',
        description:
          'The additional offset applied along the main axis between the element and its\nanchor element.',
        name: 'offset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: RangeValue<DateValue>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the overlay's open state changes.",
        name: 'onOpenChange',
        required: false,
        type: '((isOpen: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "A placeholder date that influences the format of the placeholder shown when no value is selected. Defaults to today's date at midnight.",
        name: 'placeholderValue',
        required: false,
        type: 'DateValue ',
      },
      {
        defaultValue: "'bottom'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: 'Placement ',
      },
      {
        defaultValue: '',
        description: 'Brings the list of ranges defined to the component',
        name: 'ranges',
        required: false,
        type: 'DefinedRange[] ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.',
        name: 'shouldFlip',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'true',
        description:
          'Allows to show or hide the calendar of the component\n@example <DateRangePicker showCalendar={false} />',
        name: 'showCalendar',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description:
          'Allows to pass or avoid the ranges to the component and shoen them instead of the predefined ones\n@example <DateRangePicker showRanges={false} />',
        name: 'showRanges',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the combobox',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description:
          'Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'RangeValue<DateValue> ',
      },
    ],
  },
  {
    displayName: 'Dropdown',
    props: [
      {
        defaultValue: '',
        description: 'The contents of the MenuTrigger - a trigger and a Menu.',
        name: 'children',
        required: true,
        type: 'ReactNode[]',
      },
      {
        defaultValue: 'true',
        description: 'Whether the dropdown closes when a selection is made.',
        name: 'closeOnSelect',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (uncontrolled).',
        name: 'defaultOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description: 'Whether menu trigger is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (controlled).',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '4',
        description:
          'The additional offset applied along the main axis between the element and its\nanchor element.',
        name: 'offset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: "'bottom'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: 'Placement ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.',
        name: 'shouldFlip',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'press'",
        description: 'How the menu is triggered.',
        name: 'trigger',
        required: false,
        type: 'MenuTriggerType ',
      },
      {
        defaultValue: "'menu'",
        description: 'The type of menu that the menu trigger opens.',
        name: 'type',
        required: false,
        type: '"menu" | "listbox" ',
      },
    ],
  },
  {
    displayName: 'DropdownItem',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Icon added after the button text.',
        name: 'endIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Whether the item is virtualized.',
        name: 'isVirtualized',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Item object in the collection.',
        name: 'item',
        required: true,
        type: 'Node<object>',
      },
      {
        defaultValue: '',
        description: 'Callback executed on item select.',
        name: 'onAction',
        required: false,
        type: '((key: Key) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Icon added before the button text.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Collection state.',
        name: 'state',
        required: true,
        type: 'TreeState<object>',
      },
    ],
  },
  {
    displayName: 'DropdownMenu',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Where the focus should be set.',
        name: 'autoFocus',
        required: false,
        type: 'boolean | FocusStrategy ',
      },
      {
        defaultValue: '',
        description: 'The contents of the collection.',
        name: 'children',
        required: true,
        type: 'CollectionChildren<object>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The initial selected keys in the collection (uncontrolled).',
        name: 'defaultSelectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description:
          'The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.',
        name: 'disabledKeys',
        required: false,
        type: 'Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'Whether the collection allows empty selection.',
        name: 'disallowEmptySelection',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Item objects in the collection.',
        name: 'items',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when an item is selected.',
        name: 'onAction',
        required: false,
        type: '((key: Key) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the menu should close after selecting an item.',
        name: 'onClose',
        required: false,
        type: '(() => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the selection changes.',
        name: 'onSelectionChange',
        required: false,
        type: '((keys: Selection) => any) ',
      },
      {
        defaultValue: '',
        description: 'The currently selected keys in the collection (controlled).',
        name: 'selectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'The type of selection that is allowed in the collection.',
        name: 'selectionMode',
        required: false,
        type: 'SelectionMode ',
      },
      {
        defaultValue: '',
        description: 'Whether keyboard navigation is circular.',
        name: 'shouldFocusWrap',
        required: false,
        type: 'boolean ',
      },
    ],
  },
  {
    displayName: 'DropdownSection',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'The items within the section.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Item object in the collection.',
        name: 'item',
        required: true,
        type: 'Node<object>',
      },
      {
        defaultValue: '',
        description: 'Callback executed on item select.',
        name: 'onAction',
        required: false,
        type: '((key: Key) => void) ',
      },
      {
        defaultValue: '',
        description: 'Tree state of the collection.',
        name: 'state',
        required: true,
        type: 'TreeState<object>',
      },
      {
        defaultValue: '',
        description: 'The section label.',
        name: 'title',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Flex',
    props: [
      {
        defaultValue: '',
        description: "The alignment of the container's children.",
        name: 'align',
        required: false,
        type: '"end" | "baseline" | "start" | "center" ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The gap between rows and columns.',
        name: 'gap',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
      {
        defaultValue: '',
        description: "The justification of the container's children.",
        name: 'justify',
        required: false,
        type: '"end" | "start" | "center" | "around" | "between" ',
      },
      {
        defaultValue: '',
        description: "The orientation of the container's children.",
        name: 'orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
      {
        defaultValue: '',
        description: "Whether the container's should wrap when overflown.",
        name: 'wrap',
        required: false,
        type: 'boolean ',
      },
    ],
  },
  {
    displayName: 'Grid',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'The gap between columns',
        name: 'columnGap',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
      {
        defaultValue: "'auto'",
        description: 'Shorthand for the gridTemplateColumns css property.',
        name: 'columns',
        required: false,
        type: 'number | "inherit" | "none" | (string & {}) | "auto" | "initial" | "revert" | "unset" | "max-content" | "min-content" | "subgrid" | "-moz-initial" | "revert-layer" ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridAutoFlow css property.',
        name: 'flow',
        required: false,
        type: 'GridAutoFlow ',
      },
      {
        defaultValue: '',
        description: 'The gap between rows and columns.',
        name: 'gap',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
      {
        defaultValue: '',
        description: 'The gap between rows',
        name: 'rowGap',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
      {
        defaultValue: "'auto'",
        description: 'Shorthand for the gridTemplateRows css property.',
        name: 'rows',
        required: false,
        type: 'number | "inherit" | "none" | (string & {}) | "auto" | "initial" | "revert" | "unset" | "max-content" | "min-content" | "subgrid" | "-moz-initial" | "revert-layer" ',
      },
    ],
  },
  {
    displayName: 'FormControl',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Helper text appended to the input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text element.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: 'true',
        description: 'Whether user input is required on the input before form submission.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The label for the form control input element.',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label element.',
        name: 'labelProps',
        required: false,
        type: 'LabelHTMLAttributes<HTMLLabelElement> ',
      },
      {
        defaultValue: "'vertical'",
        description: 'The layout orientation of the form control.',
        name: 'orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
    ],
  },
  {
    displayName: 'GridItem',
    props: [
      {
        defaultValue: '',
        description: 'Shorthand for the gridArea css property.',
        name: 'area',
        required: false,
        type: 'GridArea ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridColumn css property.',
        name: 'column',
        required: false,
        type: 'GridColumn ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridColumnEnd css property.',
        name: 'columnEnd',
        required: false,
        type: 'GridColumnEnd ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridColumnStart css property.',
        name: 'columnStart',
        required: false,
        type: 'GridColumnStart ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the order css property.',
        name: 'order',
        required: false,
        type: 'Order ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridRow css property.',
        name: 'row',
        required: false,
        type: 'GridRow ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridRowEnd css property.',
        name: 'rowEnd',
        required: false,
        type: 'GridRowEnd ',
      },
      {
        defaultValue: '',
        description: 'Shorthand for the gridRowStart css property.',
        name: 'rowStart',
        required: false,
        type: 'GridRowStart ',
      },
    ],
  },
  {
    displayName: 'Icon',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The material-icons icon name',
        name: 'icon',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'IconButton',
    props: [
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.',
        name: 'aria-expanded',
        required: false,
        type: 'boolean | "true" | "false" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.',
        name: 'aria-haspopup',
        required: false,
        type: 'boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Indicates the current "pressed" state of toggle buttons.',
        name: 'aria-pressed',
        required: false,
        type: 'boolean | "true" | "false" | "mixed" ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The content to display in the button.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: "'button'",
        description:
          "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
        name: 'elementType',
        required: false,
        type: '"button" | JSXElementConstructor<any> ',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'A URL to link to if elementType="a".',
        name: 'href',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the button is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler called on a click event.',
        name: 'onClick',
        required: false,
        type: '((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press is released over the target.',
        name: 'onPress',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press state changes.',
        name: 'onPressChange',
        required: false,
        type: '((isPressed: boolean) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.',
        name: 'onPressEnd',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a press interaction starts.',
        name: 'onPressStart',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.',
        name: 'onPressUp',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).',
        name: 'rel',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the button.',
        name: 'size',
        required: false,
        type: 'ButtonSize ',
      },
      {
        defaultValue: '',
        description: 'The target window for the link.',
        name: 'target',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'button'",
        description: 'The behavior of the button when used in an HTML form.',
        name: 'type',
        required: false,
        type: '"button" | "submit" | "reset" ',
      },
      {
        defaultValue: "'primary'",
        description: 'The display variant of the button.',
        name: 'variant',
        required: false,
        type: 'ButtonVariant ',
      },
    ],
  },
  {
    displayName: 'ListBox',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether to auto focus the listbox or an option.',
        name: 'autoFocus',
        required: false,
        type: 'boolean | FocusStrategy ',
      },
      {
        defaultValue: '',
        description: 'The contents of the collection.',
        name: 'children',
        required: true,
        type: 'CollectionChildren<object>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The initial selected keys in the collection (uncontrolled).',
        name: 'defaultSelectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description:
          'The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.',
        name: 'disabledKeys',
        required: false,
        type: 'Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'Whether the collection allows empty selection.',
        name: 'disallowEmptySelection',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Item objects in the collection.',
        name: 'items',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the selection changes.',
        name: 'onSelectionChange',
        required: false,
        type: '((keys: Selection) => any) ',
      },
      {
        defaultValue: '',
        description: 'The currently selected keys in the collection (controlled).',
        name: 'selectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'The type of selection that is allowed in the collection.',
        name: 'selectionMode',
        required: false,
        type: 'SelectionMode ',
      },
      {
        defaultValue: '',
        description: 'Whether focus should wrap around when the end/start is reached.',
        name: 'shouldFocusWrap',
        required: false,
        type: 'boolean ',
      },
    ],
  },
  {
    displayName: 'Link',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'ListBoxBase',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether to auto focus the listbox or an option.',
        name: 'autoFocus',
        required: false,
        type: 'boolean | FocusStrategy ',
      },
      {
        defaultValue: '',
        description: 'The contents of the collection.',
        name: 'children',
        required: true,
        type: 'CollectionChildren<object>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The initial selected keys in the collection (uncontrolled).',
        name: 'defaultSelectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description:
          'The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.',
        name: 'disabledKeys',
        required: false,
        type: 'Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'Whether the collection allows empty selection.',
        name: 'disallowEmptySelection',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Item objects in the collection.',
        name: 'items',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the selection changes.',
        name: 'onSelectionChange',
        required: false,
        type: '((keys: Selection) => any) ',
      },
      {
        defaultValue: '',
        description: 'The currently selected keys in the collection (controlled).',
        name: 'selectedKeys',
        required: false,
        type: '"all" | Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'The type of selection that is allowed in the collection.',
        name: 'selectionMode',
        required: false,
        type: 'SelectionMode ',
      },
      {
        defaultValue: '',
        description: 'Whether focus should wrap around when the end/start is reached.',
        name: 'shouldFocusWrap',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The collection list state.',
        name: 'state',
        required: true,
        type: 'ListState<object>',
      },
    ],
  },
  {
    displayName: 'ListBoxItem',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the item is virtualized.',
        name: 'isVirtualized',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Item object in the collection.',
        name: 'item',
        required: true,
        type: 'Node<object>',
      },
      {
        defaultValue: '',
        description: 'Callback executed on item select.',
        name: 'onAction',
        required: false,
        type: '((key: Key) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Icon added before the item text.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
    ],
  },
  {
    displayName: 'ListBoxSection',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Item object in the collection.',
        name: 'item',
        required: true,
        type: 'Node<object>',
      },
      {
        defaultValue: '',
        description: 'The section label.',
        name: 'title',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Overlay',
    props: [
      {
        defaultValue: '',
        description: 'The content to be rendered by the overlay',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'The ref of the element to append the children to.',
        name: 'containerRef',
        required: false,
        type: 'RefObject<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is currently open.',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
    ],
  },
  {
    displayName: 'PaginationItem',
    props: [
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.',
        name: 'aria-expanded',
        required: false,
        type: 'boolean | "true" | "false" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.',
        name: 'aria-haspopup',
        required: false,
        type: 'boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Indicates the current "pressed" state of toggle buttons.',
        name: 'aria-pressed',
        required: false,
        type: 'boolean | "true" | "false" | "mixed" ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The content to display in the button.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: "'button'",
        description:
          "The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",
        name: 'elementType',
        required: false,
        type: '"button" | JSXElementConstructor<any> ',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'A URL to link to if elementType="a".',
        name: 'href',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the pagination item is active.',
        name: 'isActive',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the button is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press is released over the target.',
        name: 'onPress',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the press state changes.',
        name: 'onPressChange',
        required: false,
        type: '((isPressed: boolean) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.',
        name: 'onPressEnd',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a press interaction starts.',
        name: 'onPressStart',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.',
        name: 'onPressUp',
        required: false,
        type: '((e: PressEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).',
        name: 'rel',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The target window for the link.',
        name: 'target',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'button'",
        description: 'The behavior of the button when used in an HTML form.',
        name: 'type',
        required: false,
        type: '"button" | "submit" | "reset" ',
      },
    ],
  },
  {
    displayName: 'Pill',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: "'indigo'",
        description: 'The color scheme of the pill',
        name: 'colorScheme',
        required: false,
        type: '"indigo" | "red" ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The icon to render in the pill.',
        name: 'icon',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: "'false'",
        description: 'Whether the pill is collapsible.',
        name: 'isCollapsible',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The text label of the pill.',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Pagination',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '1',
        description: 'The outer visible boundaries of the pagination list.',
        name: 'boundaries',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '1',
        description: 'The default page number (uncontrolled).',
        name: 'defaultPage',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Callback executed on page change.',
        name: 'onChange',
        required: false,
        type: '((page: number) => void) ',
      },
      {
        defaultValue: '',
        description: 'The current page (controlled).',
        name: 'page',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '10',
        description: 'The number of rows rendered per page.',
        name: 'rowsPerPage',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: 'true',
        description: 'Whether to show page numbers buttons.',
        name: 'showPageNumbers',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '1',
        description: 'The number of pages to display before and after the current selected page.',
        name: 'siblings',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'The total number of rows in the table.',
        name: 'totalRowCount',
        required: false,
        type: 'number ',
      },
    ],
  },
  {
    displayName: 'Popover',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: 'true',
        description: 'Whether to close the popover when the user interacts outside it.',
        name: 'isDismissable',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: 'false',
        description: 'Whether pressing the escape key to close the popover should be disabled.',
        name: 'isKeyboardDismissDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the popover is open.',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the popover should close.',
        name: 'onClose',
        required: false,
        type: '(() => void) ',
      },
      {
        defaultValue: 'false',
        description: 'Whether the popover should close when focus is lost or moves outside it.',
        name: 'shouldCloseOnBlur',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'When user interacts with the argument element outside of the overlay ref,\nreturn true if onClose should be called.  This gives you a chance to filter\nout interaction with elements that should not dismiss the overlay.\nBy default, onClose will always be called on interaction outside the overlay ref.',
        name: 'shouldCloseOnInteractOutside',
        required: false,
        type: '((element: Element) => boolean) ',
      },
    ],
  },
  {
    displayName: 'Portal',
    props: [
      {
        defaultValue: '',
        description: 'The ref of the element to append the children to.',
        name: 'containerRef',
        required: false,
        type: 'RefObject<HTMLElement> ',
      },
    ],
  },
  {
    displayName: 'Provider',
    props: [
      { defaultValue: '', description: '', name: 'about', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'accessKey', required: false, type: 'string ' },
      {
        defaultValue: '',
        description:
          'Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.',
        name: 'aria-activedescendant',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.',
        name: 'aria-atomic',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        name: 'aria-autocomplete',
        required: false,
        type: '"list" | "none" | "both" | "inline" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.',
        name: 'aria-busy',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.',
        name: 'aria-checked',
        required: false,
        type: 'boolean | "true" | "false" | "mixed" ',
      },
      {
        defaultValue: '',
        description:
          'Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.',
        name: 'aria-colcount',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        name: 'aria-colindex',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.',
        name: 'aria-colspan',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the element that represents the current item within a container or set of related elements.',
        name: 'aria-current',
        required: false,
        type: 'boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location" ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that describes the object.\n@see aria-labelledby',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.',
        name: 'aria-disabled',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1',
        name: 'aria-dropeffect',
        required: false,
        type: '"link" | "none" | "copy" | "move" | "execute" | "popup" ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.',
        name: 'aria-errormessage',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.',
        name: 'aria-expanded',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        name: 'aria-flowto',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Indicates an element\'s "grabbed" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1',
        name: 'aria-grabbed',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.',
        name: 'aria-haspopup',
        required: false,
        type: 'boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.',
        name: 'aria-hidden',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.',
        name: 'aria-invalid',
        required: false,
        type: 'boolean | "true" | "false" | "grammar" | "spelling" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.',
        name: 'aria-keyshortcuts',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Defines a string value that labels the current element.\n@see aria-labelledby.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that labels the current element.\n@see aria-describedby.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines the hierarchical level of an element within a structure.',
        name: 'aria-level',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.',
        name: 'aria-live',
        required: false,
        type: '"off" | "assertive" | "polite" ',
      },
      {
        defaultValue: '',
        description: 'Indicates whether an element is modal when displayed.',
        name: 'aria-modal',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates whether a text box accepts multiple lines of input or only a single line.',
        name: 'aria-multiline',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates that the user may select more than one item from the current selectable descendants.',
        name: 'aria-multiselectable',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        name: 'aria-orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
      {
        defaultValue: '',
        description:
          'Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.',
        name: 'aria-owns',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.',
        name: 'aria-placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        name: 'aria-posinset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the current "pressed" state of toggle buttons.\n@see aria-checked\n@see aria-selected.',
        name: 'aria-pressed',
        required: false,
        type: 'boolean | "true" | "false" | "mixed" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.',
        name: 'aria-readonly',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.',
        name: 'aria-relevant',
        required: false,
        type: '"text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" ',
      },
      {
        defaultValue: '',
        description:
          'Indicates that user input is required on the element before a form may be submitted.',
        name: 'aria-required',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Defines a human-readable, author-localized description for the role of an element.',
        name: 'aria-roledescription',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.',
        name: 'aria-rowcount',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        name: 'aria-rowindex',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.',
        name: 'aria-rowspan',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Indicates the current "selected" state of various widgets.\n@see aria-checked\n@see aria-pressed.',
        name: 'aria-selected',
        required: false,
        type: 'Booleanish ',
      },
      {
        defaultValue: '',
        description:
          'Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.',
        name: 'aria-setsize',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Indicates if items in a table or grid are sorted in ascending or descending order.',
        name: 'aria-sort',
        required: false,
        type: '"none" | "ascending" | "descending" | "other" ',
      },
      {
        defaultValue: '',
        description: 'Defines the maximum allowed value for a range widget.',
        name: 'aria-valuemax',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Defines the minimum allowed value for a range widget.',
        name: 'aria-valuemin',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Defines the current value for a range widget.\n@see aria-valuetext.',
        name: 'aria-valuenow',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description:
          'Defines the human readable text alternative of aria-valuenow for a range widget.',
        name: 'aria-valuetext',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'autoCapitalize',
        required: false,
        type: 'string ',
      },
      { defaultValue: '', description: '', name: 'autoCorrect', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'autoSave', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: 'Content to be wrapped by the provider.',
        name: 'children',
        required: true,
        type: 'ReactNode',
      },
      { defaultValue: '', description: '', name: 'className', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'color', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'contentEditable',
        required: false,
        type: 'Booleanish | "inherit" ',
      },
      { defaultValue: '', description: '', name: 'contextMenu', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'dangerouslySetInnerHTML',
        required: false,
        type: '{ __html: string; } ',
      },
      { defaultValue: '', description: '', name: 'datatype', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'defaultChecked',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'defaultValue',
        required: false,
        type: 'string | number | readonly string[] ',
      },
      { defaultValue: '', description: '', name: 'dir', required: false, type: 'string ' },
      {
        defaultValue: 'false;',
        description: 'Whether to disable the baseline css.',
        name: 'disableCSSBaseline',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'draggable',
        required: false,
        type: 'Booleanish ',
      },
      { defaultValue: '', description: '', name: 'hidden', required: false, type: 'boolean ' },
      { defaultValue: '', description: '', name: 'id', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'inlist', required: false, type: 'any' },
      {
        defaultValue: '',
        description:
          'Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute',
        name: 'inputMode',
        required: false,
        type: '"text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" ',
      },
      {
        defaultValue: '',
        description:
          'Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is',
        name: 'is',
        required: false,
        type: 'string ',
      },
      { defaultValue: '', description: '', name: 'itemID', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'itemProp', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'itemRef', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'itemScope', required: false, type: 'boolean ' },
      { defaultValue: '', description: '', name: 'itemType', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'lang', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'onAbort',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAbortCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationEnd',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationEndCapture',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationIteration',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationIterationCapture',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationStart',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAnimationStartCapture',
        required: false,
        type: 'AnimationEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAuxClick',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onAuxClickCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onBeforeInput',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onBeforeInputCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onBlur',
        required: false,
        type: 'FocusEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onBlurCapture',
        required: false,
        type: 'FocusEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCanPlay',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCanPlayCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCanPlayThrough',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCanPlayThroughCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onChange',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onChangeCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onClick',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onClickCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionEnd',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionEndCapture',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionStart',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionStartCapture',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionUpdate',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCompositionUpdateCapture',
        required: false,
        type: 'CompositionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onContextMenu',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onContextMenuCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCopy',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCopyCapture',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCut',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onCutCapture',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDoubleClick',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDoubleClickCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDrag',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragEnd',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragEndCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragEnter',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragEnterCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragExit',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragExitCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragLeave',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragLeaveCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragOver',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragOverCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragStart',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDragStartCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDrop',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDropCapture',
        required: false,
        type: 'DragEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDurationChange',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onDurationChangeCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEmptied',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEmptiedCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEncrypted',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEncryptedCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEnded',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onEndedCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onError',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onErrorCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onFocus',
        required: false,
        type: 'FocusEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onFocusCapture',
        required: false,
        type: 'FocusEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onGotPointerCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onGotPointerCaptureCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onInput',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onInputCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onInvalid',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onInvalidCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onKeyDown',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onKeyDownCapture',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '@deprecated',
        name: 'onKeyPress',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '@deprecated',
        name: 'onKeyPressCapture',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onKeyUp',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onKeyUpCapture',
        required: false,
        type: 'KeyboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoad',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadStart',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadStartCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadedData',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadedDataCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadedMetadata',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLoadedMetadataCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLostPointerCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onLostPointerCaptureCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseDown',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseDownCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseEnter',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseLeave',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseMove',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseMoveCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseOut',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseOutCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseOver',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseOverCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseUp',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseUpCapture',
        required: false,
        type: 'MouseEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPaste',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPasteCapture',
        required: false,
        type: 'ClipboardEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPause',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPauseCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPlay',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPlayCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPlaying',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPlayingCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerCancel',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerCancelCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerDown',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerDownCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerEnter',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerEnterCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerLeave',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerLeaveCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerMove',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerMoveCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerOut',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerOutCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerOver',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerOverCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerUp',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onPointerUpCapture',
        required: false,
        type: 'PointerEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onProgress',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onProgressCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onRateChange',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onRateChangeCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onReset',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onResetCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onScroll',
        required: false,
        type: 'UIEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onScrollCapture',
        required: false,
        type: 'UIEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSeeked',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSeekedCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSeeking',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSeekingCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSelect',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSelectCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onStalled',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onStalledCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSubmit',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSubmitCapture',
        required: false,
        type: 'FormEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSuspend',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onSuspendCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTimeUpdate',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTimeUpdateCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchCancel',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchCancelCapture',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchEnd',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchEndCapture',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchMove',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchMoveCapture',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchStart',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTouchStartCapture',
        required: false,
        type: 'TouchEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTransitionEnd',
        required: false,
        type: 'TransitionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onTransitionEndCapture',
        required: false,
        type: 'TransitionEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onVolumeChange',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onVolumeChangeCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onWaiting',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onWaitingCapture',
        required: false,
        type: 'ReactEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onWheel',
        required: false,
        type: 'WheelEventHandler<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onWheelCapture',
        required: false,
        type: 'WheelEventHandler<HTMLElement> ',
      },
      { defaultValue: '', description: '', name: 'placeholder', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'prefix', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'property', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'radioGroup', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'resource', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'results', required: false, type: 'number ' },
      { defaultValue: '', description: '', name: 'role', required: false, type: 'AriaRole ' },
      { defaultValue: '', description: '', name: 'security', required: false, type: 'string ' },
      { defaultValue: '', description: '', name: 'slot', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'spellCheck',
        required: false,
        type: 'Booleanish ',
      },
      { defaultValue: '', description: '', name: 'style', required: false, type: 'CSSProperties ' },
      {
        defaultValue: '',
        description: '',
        name: 'suppressContentEditableWarning',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'suppressHydrationWarning',
        required: false,
        type: 'boolean ',
      },
      { defaultValue: '', description: '', name: 'tabIndex', required: false, type: 'number ' },
      { defaultValue: '', description: '', name: 'title', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'translate',
        required: false,
        type: '"yes" | "no" ',
      },
      { defaultValue: '', description: '', name: 'typeof', required: false, type: 'string ' },
      {
        defaultValue: '',
        description: '',
        name: 'unselectable',
        required: false,
        type: '"on" | "off" ',
      },
      { defaultValue: '', description: '', name: 'vocab', required: false, type: 'string ' },
    ],
  },
  {
    displayName: 'Radio',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The label for the Radio. Accepts any renderable node.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Whether the radio button is disabled or not.\nShows that a selection exists, but is not available in that circumstance.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'The value of the radio button, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).',
        name: 'value',
        required: true,
        type: 'string',
      },
    ],
  },
  {
    displayName: 'RadioGroup',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element that provides an error message for the object.',
        name: 'aria-errormessage',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The content to display as the label.',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'The name of the RadioGroup, used when submitting an HTML form.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).',
        name: 'name',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: string) => void) ',
      },
      {
        defaultValue: "'vertical'",
        description: 'The layout orientation of the radio group.',
        name: 'orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'Select',
    props: [
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description:
          'Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).',
        name: 'autoComplete',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The contents of the collection.',
        name: 'children',
        required: true,
        type: 'CollectionChildren<object>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Sets the default open state of the menu.',
        name: 'defaultOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'The initial selected key in the collection (uncontrolled).',
        name: 'defaultSelectedKey',
        required: false,
        type: 'Key ',
      },
      {
        defaultValue: '',
        description:
          'A description for the field. Provides a hint such as specific requirements for what to choose.',
        name: 'description',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.',
        name: 'disabledKeys',
        required: false,
        type: 'Iterable<Key> ',
      },
      {
        defaultValue: '',
        description: 'An error message for the field.',
        name: 'errorMessage',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the items are currently loading.',
        name: 'isLoading',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Sets the open state of the menu.',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether user input is required on the input before form submission.\nOften paired with the `necessityIndicator` prop to add a visual indicator to the input.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Item objects in the collection.',
        name: 'items',
        required: false,
        type: 'Iterable<object> ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description:
          'The maxHeight specified for the overlay element.\nBy default, it will take all space up to the current viewport height.',
        name: 'maxHeight',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'The name of the input, used when submitting an HTML form.',
        name: 'name',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '4',
        description:
          'The additional offset applied along the main axis between the element and its\nanchor element.',
        name: 'offset',
        required: false,
        type: 'number ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.',
        name: 'onLoadMore',
        required: false,
        type: '(() => any) ',
      },
      {
        defaultValue: '',
        description: 'Method that is called when the open state of the menu changes.',
        name: 'onOpenChange',
        required: false,
        type: '((isOpen: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the selection changes.',
        name: 'onSelectionChange',
        required: false,
        type: '((key: Key) => any) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'bottom'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: 'Placement ',
      },
      {
        defaultValue: '',
        description: 'The currently selected key in the collection (controlled).',
        name: 'selectedKey',
        required: false,
        type: 'Key | null ',
      },
      {
        defaultValue: 'true',
        description:
          'Whether the element should flip its orientation (e.g. top to bottom or left to right) when\nthere is insufficient room for it to render completely.',
        name: 'shouldFlip',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the combobox',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description:
          'Icon displayed at the start of the text field.\n@example <Combobox startIcon={<Icon />} />',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
    ],
  },
  {
    displayName: 'SelectItem',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: '"div" ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Icon added before the item text.',
        name: 'startIcon',
        required: false,
        type: 'ReactElement<any, string | JSXElementConstructor<any>> ',
      },
    ],
  },
  {
    displayName: 'SelectSection',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: '"div" ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The section label.',
        name: 'title',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Separator',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: "'horizontal",
        description: 'The orientation of the separator.',
        name: 'orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
    ],
  },
  {
    displayName: 'Stack',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The gap between elements in the stack.',
        name: 'gap',
        required: false,
        type: '"small" | "x-large" | "x-small" | "large" | "medium" ',
      },
      {
        defaultValue: "'vertical'",
        description: 'The layout orientation  of the stack.',
        name: 'orientation',
        required: false,
        type: '"horizontal" | "vertical" ',
      },
    ],
  },
  {
    displayName: 'Switch',
    props: [
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) whose contents or presence are controlled by the current element.',
        name: 'aria-controls',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that describes the object.',
        name: 'aria-describedby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description:
          'Identifies the element (or elements) that provide a detailed, extended description for the object.',
        name: 'aria-details',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Defines a string value that labels the current element.',
        name: 'aria-label',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Identifies the element (or elements) that labels the current element.',
        name: 'aria-labelledby',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: "The content to render as the Switch's label.",
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the Switch should be selected (uncontrolled).',
        name: 'defaultSelected',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.',
        name: 'excludeFromTabOrder',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          "The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",
        name: 'id',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the Switch should be selected (controlled).',
        name: 'isSelected',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description:
          'The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).',
        name: 'name',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the Switch's selection state changes.",
        name: 'onChange',
        required: false,
        type: '((isSelected: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description:
          'The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).',
        name: 'value',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'Table',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseEnter',
        required: false,
        type: '((event: MouseEvent<Element, MouseEvent>) => void) ',
      },
      {
        defaultValue: '',
        description: '',
        name: 'onMouseLeave',
        required: false,
        type: '((event: MouseEvent<Element, MouseEvent>) => void) ',
      },
      { defaultValue: '', description: '', name: 'showHover', required: false, type: 'boolean ' },
    ],
  },
  {
    displayName: 'TableBody',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'TableCell',
    props: [
      {
        defaultValue: "'left'",
        description: 'Text alignment of the table cell.',
        name: 'align',
        required: false,
        type: 'Align ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Handler called on mouse enter.',
        name: 'onMouseEnter',
        required: false,
        type: '((event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void) ',
      },
    ],
  },
  {
    displayName: 'TableColumn',
    props: [
      {
        defaultValue: "'left'",
        description: 'Text alignment of the table column.',
        name: 'align',
        required: false,
        type: 'Align ',
      },
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'The content of the column.',
        name: 'children',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the current column is actively sorted.',
        name: 'isActive',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the column supports sorting.',
        name: 'isSortable',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Callback executed on column click, used for column sort only.',
        name: 'onClick',
        required: false,
        type: '((event: MouseEvent<HTMLTableCellElement, MouseEvent>) => void) ',
      },
      {
        defaultValue: "'asc'",
        description: 'The sort direction of the column.',
        name: 'sortDirection',
        required: false,
        type: '"desc" | "asc" ',
      },
    ],
  },
  {
    displayName: 'TableFooter',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'TableHeader',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
    ],
  },
  {
    displayName: 'TableRow',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Handler called on mouse enter.',
        name: 'onMouseEnter',
        required: false,
        type: '((event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler called on mouse leave.',
        name: 'onMouseLeave',
        required: false,
        type: '((event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void) ',
      },
    ],
  },
  {
    displayName: 'Tag',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the tag is removeable.',
        name: 'isRemovable',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler called on tag removable.',
        name: 'onRemove',
        required: false,
        type: '(() => void) ',
      },
    ],
  },
  {
    displayName: 'TextArea',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'Props passed to the input element.',
        name: 'inputProps',
        required: false,
        type: 'InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'The ref passed to the input element.',
        name: 'inputRef',
        required: false,
        type: 'RefObject<HTMLInputElement | HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether user input is required on the input before form submission.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'LabelHTMLAttributes<HTMLLabelElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the textfield should support multiline input (textarea).',
        name: 'multiline',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: string) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'TextField',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'The default value (uncontrolled).',
        name: 'defaultValue',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: '',
        description: 'Icon displayed at the end of the text field.',
        name: 'endIcon',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'Props passed to the input element.',
        name: 'inputProps',
        required: false,
        type: 'InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'The ref passed to the input element.',
        name: 'inputRef',
        required: false,
        type: 'RefObject<HTMLInputElement | HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether user input is required on the input before form submission.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'LabelHTMLAttributes<HTMLLabelElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the textfield should support multiline input (textarea).',
        name: 'multiline',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the value changes.',
        name: 'onChange',
        required: false,
        type: '((value: string) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Temporary text that occupies the text input when it is empty.',
        name: 'placeholder',
        required: false,
        type: 'string ',
      },
      {
        defaultValue: "'medium'",
        description: 'The size of the combobox',
        name: 'size',
        required: false,
        type: '"small" | "medium" ',
      },
      {
        defaultValue: '',
        description: 'Icon displayed at the start of the text field.',
        name: 'startIcon',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
      {
        defaultValue: '',
        description: 'The current value (controlled).',
        name: 'value',
        required: false,
        type: 'string ',
      },
    ],
  },
  {
    displayName: 'TextFieldBase',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Whether the element should receive focus on render.',
        name: 'autoFocus',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Icon displayed at the end of the text field.',
        name: 'endIcon',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Helper text to append to the form control input element.',
        name: 'helperText',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the helper text.',
        name: 'helperTextProps',
        required: false,
        type: 'HTMLAttributes<HTMLElement> ',
      },
      {
        defaultValue: '',
        description: 'Props passed to the input element.',
        name: 'inputProps',
        required: false,
        type: 'InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'The ref passed to the input element.',
        name: 'inputRef',
        required: false,
        type: 'RefObject<HTMLInputElement | HTMLTextAreaElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the input is disabled.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the input can be selected but not changed by the user.',
        name: 'isReadOnly',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether user input is required on the input before form submission.',
        name: 'isRequired',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Label of the input element',
        name: 'label',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Props passed to the label.',
        name: 'labelProps',
        required: false,
        type: 'LabelHTMLAttributes<HTMLLabelElement> ',
      },
      {
        defaultValue: '',
        description: 'Whether the textfield should support multiline input (textarea).',
        name: 'multiline',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element loses focus.',
        name: 'onBlur',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when the element receives focus.',
        name: 'onFocus',
        required: false,
        type: '((e: FocusEvent<Element, Element>) => void) ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the element's focus status changes.",
        name: 'onFocusChange',
        required: false,
        type: '((isFocused: boolean) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is pressed.',
        name: 'onKeyDown',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Handler that is called when a key is released.',
        name: 'onKeyUp',
        required: false,
        type: '((e: KeyboardEvent) => void) ',
      },
      {
        defaultValue: '',
        description: 'Icon displayed at the start of the text field.',
        name: 'startIcon',
        required: false,
        type: 'ReactNode',
      },
      {
        defaultValue: '',
        description: 'Whether the input should display its "valid" or "invalid" visual styling.',
        name: 'validationState',
        required: false,
        type: 'ValidationState ',
      },
    ],
  },
  {
    displayName: 'Tooltip',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (uncontrolled).',
        name: 'defaultOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the tooltip should be disabled, independent from the trigger.',
        name: 'isDisabled',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: 'Whether the overlay is open by default (controlled).',
        name: 'isOpen',
        required: false,
        type: 'boolean ',
      },
      {
        defaultValue: '',
        description: "Handler that is called when the overlay's open state changes.",
        name: 'onOpenChange',
        required: false,
        type: '((isOpen: boolean) => void) ',
      },
      {
        defaultValue: "'top'",
        description: 'The placement of the element with respect to its anchor element.',
        name: 'placement',
        required: false,
        type: '"end" | "start" | "left" | "right" | "top" | "bottom" ',
      },
      {
        defaultValue: '',
        description: 'The content rendered within the tooltip.',
        name: 'title',
        required: false,
        type: 'ReactNode',
      },
    ],
  },
  {
    displayName: 'Typography',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: "'primary'",
        description: 'The display variant of the text.',
        name: 'variant',
        required: false,
        type: '"body" | "caption" | "title" | "heading" | "display" | "subtitle" | "subtext" | "bodyBold" | "captionBold" | "subtextBold" ',
      },
    ],
  },
  {
    displayName: 'VisuallyHidden',
    props: [
      {
        defaultValue: '',
        description: 'The DOM tag or react component to use for the element.',
        name: 'as',
        required: false,
        type: 'As<any>',
      },
      {
        defaultValue: '',
        description: 'Theme aware style object.',
        name: 'css',
        required: false,
        type: 'CSS ',
      },
      {
        defaultValue: '',
        description: 'Whether the element should become visible on focus, for example skip links.',
        name: 'isFocusable',
        required: false,
        type: 'boolean ',
      },
    ],
  },
];
